{"version":3,"file":"smsapi-javascript-client.cjs.development.js","sources":["../src/modules/baseModule/index.ts","../src/modules/hlr/index.ts","../src/modules/baseMessageModule/index.ts","../src/modules/mms/index.ts","../src/modules/profile/index.ts","../src/modules/sendernames/index.ts","../src/modules/sms/index.ts","../src/modules/subusers/index.ts","../src/modules/templates/index.ts","../src/smsapi/httpClient/extractDataFromResponse/index.ts","../src/smsapi/index.ts","../src/smsapi/com.ts","../src/smsapi/pl.ts"],"sourcesContent":["import { AxiosInstance } from 'axios';\n\nexport class BaseModule {\n  protected httpClient: AxiosInstance;\n\n  constructor(httpClient: AxiosInstance) {\n    this.httpClient = httpClient;\n  }\n}\n","import { BaseModule } from '../baseModule';\n\nimport { HlrCheckResponse } from './types/HlrCheckResponse';\n\nexport class Hlr extends BaseModule {\n  async check(\n    numbers: string[],\n    idx?: string\n  ): Promise<HlrCheckResponse | HlrCheckResponse[]> {\n    return await this.httpClient.get<\n      HlrCheckResponse | HlrCheckResponse[],\n      HlrCheckResponse | HlrCheckResponse[]\n    >('/hlr.do', {\n      params: {\n        format: 'json',\n        idx,\n        number: numbers.join(','),\n      },\n    });\n  }\n}\n","import isArray from 'lodash/isArray';\nimport mapKeys from 'lodash/mapKeys';\nimport snakeCase from 'lodash/snakeCase';\n\nimport { BaseModule } from '../baseModule';\nimport { SmsDetails } from '../sms/types/SmsDetails';\nimport { MessageResponse } from '../../types/MessageResponse';\n\ninterface SmsApiDetails {\n  [key: string]: unknown;\n}\n\ninterface SmsContent {\n  message: string;\n}\n\ninterface MmsContent {\n  smil: string;\n  subject: string;\n}\n\nexport class BaseMessageModule extends BaseModule {\n  protected endpoint: string;\n\n  protected async send(\n    content: SmsContent | MmsContent,\n    to?: string | string[],\n    group?: string | string[],\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    const body: Record<string, unknown> = {\n      details: true,\n      encoding: 'utf-8',\n      format: 'json',\n      ...this.formatSmsDetails(details || {}),\n    };\n\n    if (to) {\n      body.to = isArray(to) ? to.join(',') : to;\n    } else {\n      body.group = isArray(group) ? group.join(',') : group;\n    }\n\n    if (this.isSms(content)) {\n      body.message = content.message.trim();\n    }\n\n    if (this.isMms(content)) {\n      body.subject = content.subject.trim();\n      body.smil = content.smil;\n    }\n\n    const data = await this.httpClient.post<MessageResponse, MessageResponse>(\n      this.endpoint,\n      body\n    );\n\n    return this.formatSmsResponse(data);\n  }\n\n  private isSms(content: SmsContent | MmsContent): content is SmsContent {\n    return (content as SmsContent).message !== undefined;\n  }\n\n  private isMms(content: SmsContent | MmsContent): content is MmsContent {\n    return (\n      (content as MmsContent).smil !== undefined &&\n      (content as MmsContent).subject !== undefined\n    );\n  }\n\n  private formatSmsDetails(details: SmsDetails): SmsApiDetails {\n    const formattedDetails = details as Record<string, unknown>;\n\n    if (details.date) {\n      formattedDetails.dateValidate = true;\n      formattedDetails.date = details.date.toISOString();\n    }\n\n    if (details.expirationDate) {\n      formattedDetails.expirationDate = details.expirationDate.toISOString();\n    }\n\n    return mapKeys(formattedDetails, (_, key) => {\n      if (/param[1-4]/.test(key)) {\n        return key;\n      }\n\n      if (key === 'noUnicode') {\n        return key.toLowerCase();\n      }\n\n      return snakeCase(key);\n    });\n  }\n\n  protected formatSmsResponse(response: MessageResponse): MessageResponse {\n    return {\n      ...response,\n      list: response.list.map((sms) => ({\n        ...sms,\n        dateSent: new Date(sms.dateSent),\n      })),\n    };\n  }\n}\n","import { BaseMessageModule } from '../baseMessageModule';\nimport { MessageResponse } from '../../types/MessageResponse';\n\nimport { MmsDetails } from './types/MmsDetails';\n\nexport class Mms extends BaseMessageModule {\n  endpoint = '/mms.do';\n\n  async sendMms(\n    numbers: string | string[],\n    subject: string,\n    smil: string,\n    details?: MmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        smil,\n        subject,\n      },\n      numbers,\n      undefined,\n      details\n    );\n  }\n\n  async sendMmsToGroup(\n    groups: string | string[],\n    subject: string,\n    smil: string,\n    details?: MmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        smil,\n        subject,\n      },\n      undefined,\n      groups,\n      details\n    );\n  }\n}\n","import { BaseModule } from '../baseModule';\n\nimport { ProfileResponse } from './types/ProfileResponse';\n\nexport class Profile extends BaseModule {\n  async get(): Promise<ProfileResponse> {\n    return await this.httpClient.get<ProfileResponse, ProfileResponse>(\n      '/profile'\n    );\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { Sendername } from './types/Sendername';\nimport { SendernameStatus } from './types/SendernameStatus';\n\ninterface ApiSendername {\n  createdAt: string;\n  isDefault: boolean;\n  sender: string;\n  status: SendernameStatus;\n}\n\nexport class Sendernames extends BaseModule {\n  async get(): Promise<ApiCollection<Sendername>> {\n    const data = await this.httpClient.get<\n      ApiCollection<ApiSendername>,\n      ApiCollection<ApiSendername>\n    >('/sms/sendernames');\n\n    return {\n      ...data,\n      collection: data.collection.map(this.formatSendernameDates),\n    };\n  }\n\n  async getBySender(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.get<ApiSendername, ApiSendername>(\n      `/sms/sendernames/${sender}`\n    );\n\n    return this.formatSendernameDates(data);\n  }\n\n  async create(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.post<ApiSendername, ApiSendername>(\n      '/sms/sendernames',\n      {\n        sender,\n      }\n    );\n\n    return this.formatSendernameDates(data);\n  }\n\n  async makeDefault(sender: string): Promise<void> {\n    await this.httpClient.post<void, void>(\n      `/sms/sendernames/${sender}/commands/make_default`\n    );\n  }\n\n  async remove(sender: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/sms/sendernames/${sender}`);\n  }\n\n  private formatSendernameDates(sendername: ApiSendername): Sendername {\n    return {\n      ...sendername,\n      createdAt: new Date(sendername.createdAt),\n    };\n  }\n}\n","import isArray from 'lodash/isArray';\n\nimport { BaseMessageModule } from '../baseMessageModule';\nimport { MessageResponse } from '../../types/MessageResponse';\n\nimport { ScheduledSmsResponse } from './types/ScheduledSmsResponse';\nimport { SmsDetails } from './types/SmsDetails';\n\nexport class Sms extends BaseMessageModule {\n  endpoint = '/sms.do';\n\n  async sendSms(\n    numbers: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        message,\n      },\n      numbers,\n      undefined,\n      details\n    );\n  }\n\n  async sendFlashSms(\n    numbers: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.sendSms(numbers, message, { ...details, flash: true });\n  }\n\n  async sendSmsToGroup(\n    groups: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        message,\n      },\n      undefined,\n      groups,\n      details\n    );\n  }\n\n  async sendFlashSmsToGroup(\n    groups: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.sendSmsToGroup(groups, message, {\n      ...details,\n      flash: true,\n    });\n  }\n\n  async removeScheduledSms(\n    smsId: string | string[]\n  ): Promise<ScheduledSmsResponse> {\n    const ids = isArray(smsId) ? smsId.join(',') : smsId;\n\n    return await this.httpClient.post<\n      ScheduledSmsResponse,\n      ScheduledSmsResponse\n    >(this.endpoint, {\n      format: 'json',\n      sch_del: ids,\n    });\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection, NewSubuser } from '../../types';\n\nimport { Subuser } from './types/Subuser';\nimport { UpdateSubuser } from './types/UpdateSubuser';\n\nexport interface ApiSubuser\n  extends Omit<Omit<Subuser, 'credentials'>, 'points'> {\n  credentials: {\n    username: string;\n    password: string;\n    api_password: string;\n  };\n  points: {\n    from_account: number;\n    per_month: number;\n  };\n}\n\nexport class Subusers extends BaseModule {\n  async get(): Promise<ApiCollection<Subuser>> {\n    return await this.httpClient.get<\n      ApiCollection<Subuser>,\n      ApiCollection<Subuser>\n    >('/subusers');\n  }\n\n  async getById(subuserId: string): Promise<Subuser> {\n    return await this.httpClient.get<Subuser, Subuser>(\n      `/subusers/${subuserId}`\n    );\n  }\n\n  async create(newSubuser: NewSubuser): Promise<Subuser> {\n    const { credentials, points } = newSubuser;\n\n    return await this.httpClient.post<Subuser, Subuser>('/subusers', {\n      ...newSubuser,\n      credentials: {\n        api_password: credentials.apiPassword,\n        password: credentials.password,\n        username: credentials.username,\n      },\n      points: points\n        ? {\n            from_account: points.fromAccount,\n            per_month: points.perMonth,\n          }\n        : undefined,\n    });\n  }\n\n  async update(\n    subuserId: string,\n    updateSubuser: Partial<UpdateSubuser>\n  ): Promise<Subuser> {\n    const { credentials, points } = updateSubuser;\n\n    return await this.httpClient.put<Subuser, Subuser>(\n      `/subusers/${subuserId}`,\n      {\n        ...updateSubuser,\n        credentials:\n          credentials && (credentials.password || credentials.apiPassword)\n            ? {\n                api_password: credentials.apiPassword,\n                password: credentials.password,\n              }\n            : undefined,\n        points:\n          points && (points.fromAccount || points.perMonth)\n            ? {\n                from_account: points.fromAccount,\n                per_month: points.perMonth,\n              }\n            : undefined,\n      }\n    );\n  }\n\n  async remove(subuserId: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/subusers/${subuserId}`);\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { NewTemplate } from './types/NewTemplate';\nimport { Template } from './types/Template';\n\nexport class Templates extends BaseModule {\n  async get(): Promise<ApiCollection<Template>> {\n    return await this.httpClient.get<\n      ApiCollection<Template>,\n      ApiCollection<Template>\n    >('/sms/templates');\n  }\n\n  async getById(templateId: string): Promise<Template> {\n    return await this.httpClient.get<Template, Template>(\n      `/sms/templates/${templateId}`\n    );\n  }\n\n  async create(newTemplate: NewTemplate): Promise<Template> {\n    return await this.httpClient.post<Template, Template>(\n      '/sms/templates',\n      newTemplate\n    );\n  }\n\n  async update(\n    templateId: string,\n    newTemplate: Partial<NewTemplate>\n  ): Promise<Template> {\n    return await this.httpClient.put<Template, Template>(\n      `/sms/templates/${templateId}`,\n      newTemplate\n    );\n  }\n\n  async remove(templateId: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/sms/templates/${templateId}`);\n  }\n}\n","import { AxiosResponse } from 'axios';\nimport camelCase from 'lodash/camelCase';\nimport forEach from 'lodash/forEach';\nimport isArray from 'lodash/isArray';\nimport isObject from 'lodash/isObject';\nimport mapKeys from 'lodash/mapKeys';\n\nconst formatKeys = (\n  object: Record<string, unknown>\n): Record<string, unknown> => {\n  return mapKeys(object, (_, key) => {\n    return camelCase(key);\n  });\n};\n\nconst formatResponse = (object: Record<string, unknown>) => {\n  const newResponse = formatKeys(object);\n\n  forEach(newResponse, (value, key) => {\n    if (isObject(value)) {\n      newResponse[key] = formatKeys(value as Record<string, unknown>);\n    }\n  });\n\n  return newResponse;\n};\n\nconst isApiCollection = (data: Record<string, unknown>): boolean => {\n  return !!data.collection && !!data.size;\n};\n\nconst isSmsResponse = (data: Record<string, unknown>): boolean => {\n  return !!data.list && !!data.count;\n};\n\nexport const extractDataFromResponse = (response: AxiosResponse) => {\n  const { data } = response;\n\n  if (!data) {\n    return data;\n  }\n\n  if (isArray(data)) {\n    return data.map(formatResponse);\n  }\n\n  if (isApiCollection(data)) {\n    return {\n      ...data,\n      collection: data.collection.map(formatResponse),\n    };\n  }\n\n  if (isSmsResponse(data)) {\n    return {\n      ...data,\n      list: data.list.map(formatResponse),\n    };\n  }\n\n  return formatResponse(data);\n};\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport axios, { AxiosInstance } from 'axios';\n// @ts-ignore TS7016\nimport adapter from 'axios/lib/adapters/http';\n\nimport { Hlr } from '../modules/hlr';\nimport { Mms } from '../modules/mms';\nimport { Profile } from '../modules/profile';\nimport { Sendernames } from '../modules/sendernames';\nimport { Sms } from '../modules/sms';\nimport { Subusers } from '../modules/subusers';\nimport { Templates } from '../modules/templates';\n// @ts-ignore TS6059\nimport { version } from '../../package.json';\n\nimport { extractDataFromResponse } from './httpClient/extractDataFromResponse';\n/* eslint-enable @typescript-eslint/ban-ts-comment */\n\nexport class SMSAPI {\n  private apiUrl: string;\n  private accessToken: string;\n\n  private httpClient: AxiosInstance;\n\n  public hlr: Hlr;\n  public mms: Mms;\n  public profile: Profile;\n  public sendernames: Sendernames;\n  public subusers: Subusers;\n  public sms: Sms;\n  public templates: Templates;\n\n  constructor(accessToken: string, apiUrl: string) {\n    this.accessToken = accessToken;\n    this.apiUrl = apiUrl;\n\n    this.httpClient = this.setHttpClient();\n\n    this.hlr = new Hlr(this.httpClient);\n    this.mms = new Mms(this.httpClient);\n    this.profile = new Profile(this.httpClient);\n    this.sendernames = new Sendernames(this.httpClient);\n    this.sms = new Sms(this.httpClient);\n    this.subusers = new Subusers(this.httpClient);\n    this.templates = new Templates(this.httpClient);\n  }\n\n  private getUserAgent(): string {\n    return `smsapi/js-client:${version}`;\n  }\n\n  private setHttpClient(): AxiosInstance {\n    const httpClient = axios.create({\n      adapter,\n      baseURL: this.apiUrl,\n      headers: {\n        Accept: 'application/json',\n        Authorization: `Bearer ${this.accessToken}`,\n        'User-Agent': this.getUserAgent(),\n      },\n    });\n\n    httpClient.interceptors.response.use(extractDataFromResponse, (error) => {\n      console.error(error.response.config.data, error.response.data);\n\n      return Promise.reject(error);\n    });\n\n    return httpClient;\n  }\n}\n","import { SMSAPI } from '.';\n\nexport class SMSAPIcom extends SMSAPI {\n  constructor(accessToken: string) {\n    const API_URL = 'https://api.smsapi.com';\n\n    super(accessToken, API_URL);\n  }\n}\n","import { SMSAPI } from '.';\n\nexport class SMSAPIpl extends SMSAPI {\n  constructor(accessToken: string) {\n    const API_URL = 'https://api.smsapi.pl';\n\n    super(accessToken, API_URL);\n  }\n}\n"],"names":["BaseModule","httpClient","Hlr","check","numbers","idx","get","params","format","number","join","BaseMessageModule","send","content","to","group","details","body","encoding","formatSmsDetails","isArray","isSms","message","trim","isMms","subject","smil","post","endpoint","data","formatSmsResponse","undefined","formattedDetails","date","dateValidate","toISOString","expirationDate","mapKeys","_","key","test","toLowerCase","snakeCase","response","list","map","sms","dateSent","Date","Mms","sendMms","sendMmsToGroup","groups","Profile","Sendernames","collection","formatSendernameDates","getBySender","sender","create","makeDefault","remove","sendername","createdAt","Sms","sendSms","sendFlashSms","flash","sendSmsToGroup","sendFlashSmsToGroup","removeScheduledSms","smsId","ids","sch_del","Subusers","getById","subuserId","newSubuser","credentials","points","api_password","apiPassword","password","username","from_account","fromAccount","per_month","perMonth","update","updateSubuser","put","Templates","templateId","newTemplate","formatKeys","object","camelCase","formatResponse","newResponse","forEach","value","isObject","isApiCollection","size","isSmsResponse","count","extractDataFromResponse","SMSAPI","accessToken","apiUrl","setHttpClient","hlr","mms","profile","sendernames","subusers","templates","getUserAgent","version","axios","adapter","baseURL","headers","Accept","Authorization","interceptors","use","error","console","config","Promise","reject","SMSAPIcom","API_URL","SMSAPIpl"],"mappings":"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"}