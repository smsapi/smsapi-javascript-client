{"version":3,"file":"smsapi-javascript-client.cjs.production.min.js","sources":["../src/modules/baseModule/index.ts","../src/modules/hlr/index.ts","../src/modules/baseMessageModule/index.ts","../src/modules/mms/index.ts","../src/modules/profile/index.ts","../src/modules/sendernames/index.ts","../src/modules/sms/index.ts","../src/modules/subusers/index.ts","../src/modules/templates/index.ts","../src/modules/vms/index.ts","../src/smsapi/httpClient/extractDataFromResponse/index.ts","../src/smsapi/index.ts","../src/smsapi/com.ts","../src/smsapi/pl.ts"],"sourcesContent":["import { AxiosInstance } from 'axios';\n\nexport class BaseModule {\n  protected httpClient: AxiosInstance;\n\n  constructor(httpClient: AxiosInstance) {\n    this.httpClient = httpClient;\n  }\n}\n","import { BaseModule } from '../baseModule';\n\nimport { HlrCheckResponse } from './types/HlrCheckResponse';\n\nexport class Hlr extends BaseModule {\n  async check(\n    numbers: string[],\n    idx?: string\n  ): Promise<HlrCheckResponse | HlrCheckResponse[]> {\n    return await this.httpClient.get<\n      HlrCheckResponse | HlrCheckResponse[],\n      HlrCheckResponse | HlrCheckResponse[]\n    >('/hlr.do', {\n      params: {\n        format: 'json',\n        idx,\n        number: numbers.join(','),\n      },\n    });\n  }\n}\n","import fs from 'fs';\n\nimport isArray from 'lodash/isArray';\nimport mapKeys from 'lodash/mapKeys';\nimport mapValues from 'lodash/mapValues';\nimport snakeCase from 'lodash/snakeCase';\nimport FormData from 'form-data';\nimport { AxiosRequestConfig, AxiosInstance } from 'axios';\n\nimport { BaseModule } from '../baseModule';\nimport { SmsDetails } from '../sms/types/SmsDetails';\nimport { MessageResponse } from '../../types/MessageResponse';\n\nimport {\n  MessageContent,\n  SmsContent,\n  MmsContent,\n  VmsTextContent,\n  VmsLocalFileContent,\n  VmsRemoteFileContent,\n} from './types/MessageContent';\n\ninterface SmsApiDetails {\n  [key: string]: unknown;\n}\n\nexport class BaseMessageModule extends BaseModule {\n  protected endpoint: string;\n\n  constructor(httpClient: AxiosInstance) {\n    super(httpClient);\n\n    this.httpClient.interceptors.request.use((config) => {\n      const params = config.params;\n\n      return {\n        ...config,\n        params: mapValues(params, (param) => {\n          if (typeof param !== 'boolean') {\n            return param;\n          }\n\n          return +param;\n        }),\n      };\n    });\n  }\n\n  protected async send(\n    content: MessageContent,\n    to?: string | string[],\n    group?: string | string[],\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    const form = new FormData();\n    let headers: AxiosRequestConfig | undefined = undefined;\n\n    const body: Record<string, unknown> = {\n      details: true,\n      encoding: 'utf-8',\n      format: 'json',\n      ...this.formatSmsDetails(details || {}),\n    };\n\n    if (to) {\n      body.to = isArray(to) ? to.join(',') : to;\n    } else {\n      body.group = isArray(group) ? group.join(',') : group;\n    }\n\n    if (this.isSms(content)) {\n      body.message = content.message.trim();\n    }\n\n    if (this.isMms(content)) {\n      body.subject = content.subject.trim();\n      body.smil = content.smil;\n    }\n\n    if (this.isVmsText(content)) {\n      body.tts = content.tts.trim();\n      body.tts_lector = content.ttsLector || 'ewa';\n    }\n\n    if (this.isVmsRemotePath(content)) {\n      body.file = content.remotePath;\n    }\n\n    if (this.isVmsLocalFile(content)) {\n      const file = fs.createReadStream(content.localPath);\n\n      form.append('file', file);\n\n      headers = form.getHeaders();\n    }\n\n    const data = await this.httpClient.request<\n      MessageResponse,\n      MessageResponse\n    >({\n      data: form,\n      headers,\n      method: 'post',\n      params: body,\n      url: this.endpoint,\n    });\n\n    return this.formatSmsResponse(data);\n  }\n\n  private isSms(content: MessageContent): content is SmsContent {\n    return (content as SmsContent).message !== undefined;\n  }\n\n  private isMms(content: MessageContent): content is MmsContent {\n    return (\n      (content as MmsContent).smil !== undefined &&\n      (content as MmsContent).subject !== undefined\n    );\n  }\n\n  private isVmsText(content: MessageContent): content is VmsTextContent {\n    return (content as VmsTextContent).tts !== undefined;\n  }\n\n  private isVmsLocalFile(\n    content: MessageContent\n  ): content is VmsLocalFileContent {\n    return (content as VmsLocalFileContent).localPath !== undefined;\n  }\n\n  private isVmsRemotePath(\n    content: MessageContent\n  ): content is VmsRemoteFileContent {\n    return (content as VmsRemoteFileContent).remotePath !== undefined;\n  }\n\n  private formatSmsDetails(details: SmsDetails): SmsApiDetails {\n    const formattedDetails = details as Record<string, unknown>;\n\n    if (details.date) {\n      formattedDetails.dateValidate = true;\n      formattedDetails.date = details.date.toISOString();\n    }\n\n    if (details.expirationDate) {\n      formattedDetails.expirationDate = details.expirationDate.toISOString();\n    }\n\n    return mapKeys(formattedDetails, (_, key) => {\n      if (/param[1-4]/.test(key)) {\n        return key;\n      }\n\n      if (key === 'noUnicode') {\n        return key.toLowerCase();\n      }\n\n      return snakeCase(key);\n    });\n  }\n\n  protected formatSmsResponse(response: MessageResponse): MessageResponse {\n    return {\n      ...response,\n      list: response.list.map((sms) => ({\n        ...sms,\n        dateSent: new Date(sms.dateSent),\n        points:\n          typeof sms.points === 'string' ? parseFloat(sms.points) : sms.points,\n      })),\n    };\n  }\n}\n","import { BaseMessageModule } from '../baseMessageModule';\nimport { MessageResponse } from '../../types/MessageResponse';\n\nimport { MmsDetails } from './types/MmsDetails';\n\nexport class Mms extends BaseMessageModule {\n  endpoint = '/mms.do';\n\n  async sendMms(\n    numbers: string | string[],\n    subject: string,\n    smil: string,\n    details?: MmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        smil,\n        subject,\n      },\n      numbers,\n      undefined,\n      details\n    );\n  }\n\n  async sendMmsToGroup(\n    groups: string | string[],\n    subject: string,\n    smil: string,\n    details?: MmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        smil,\n        subject,\n      },\n      undefined,\n      groups,\n      details\n    );\n  }\n}\n","import { BaseModule } from '../baseModule';\n\nimport { ProfileResponse } from './types/ProfileResponse';\n\nexport class Profile extends BaseModule {\n  async get(): Promise<ProfileResponse> {\n    return await this.httpClient.get<ProfileResponse, ProfileResponse>(\n      '/profile'\n    );\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { Sendername } from './types/Sendername';\nimport { SendernameStatus } from './types/SendernameStatus';\n\ninterface ApiSendername {\n  createdAt: string;\n  isDefault: boolean;\n  sender: string;\n  status: SendernameStatus;\n}\n\nexport class Sendernames extends BaseModule {\n  async get(): Promise<ApiCollection<Sendername>> {\n    const data = await this.httpClient.get<\n      ApiCollection<ApiSendername>,\n      ApiCollection<ApiSendername>\n    >('/sms/sendernames');\n\n    return {\n      ...data,\n      collection: data.collection.map(this.formatSendernameDates),\n    };\n  }\n\n  async getBySender(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.get<ApiSendername, ApiSendername>(\n      `/sms/sendernames/${sender}`\n    );\n\n    return this.formatSendernameDates(data);\n  }\n\n  async create(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.post<ApiSendername, ApiSendername>(\n      '/sms/sendernames',\n      {\n        sender,\n      }\n    );\n\n    return this.formatSendernameDates(data);\n  }\n\n  async makeDefault(sender: string): Promise<void> {\n    await this.httpClient.post<void, void>(\n      `/sms/sendernames/${sender}/commands/make_default`\n    );\n  }\n\n  async remove(sender: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/sms/sendernames/${sender}`);\n  }\n\n  private formatSendernameDates(sendername: ApiSendername): Sendername {\n    return {\n      ...sendername,\n      createdAt: new Date(sendername.createdAt),\n    };\n  }\n}\n","import isArray from 'lodash/isArray';\n\nimport { BaseMessageModule } from '../baseMessageModule';\nimport { MessageResponse } from '../../types/MessageResponse';\n\nimport { ScheduledSmsResponse } from './types/ScheduledSmsResponse';\nimport { SmsDetails } from './types/SmsDetails';\n\nexport class Sms extends BaseMessageModule {\n  endpoint = '/sms.do';\n\n  async sendSms(\n    numbers: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        message,\n      },\n      numbers,\n      undefined,\n      details\n    );\n  }\n\n  async sendFlashSms(\n    numbers: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.sendSms(numbers, message, { ...details, flash: true });\n  }\n\n  async sendSmsToGroup(\n    groups: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        message,\n      },\n      undefined,\n      groups,\n      details\n    );\n  }\n\n  async sendFlashSmsToGroup(\n    groups: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.sendSmsToGroup(groups, message, {\n      ...details,\n      flash: true,\n    });\n  }\n\n  async removeScheduledSms(\n    smsId: string | string[]\n  ): Promise<ScheduledSmsResponse> {\n    const ids = isArray(smsId) ? smsId.join(',') : smsId;\n\n    return await this.httpClient.post<\n      ScheduledSmsResponse,\n      ScheduledSmsResponse\n    >(this.endpoint, {\n      format: 'json',\n      sch_del: ids,\n    });\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection, NewSubuser } from '../../types';\n\nimport { Subuser } from './types/Subuser';\nimport { UpdateSubuser } from './types/UpdateSubuser';\n\nexport interface ApiSubuser\n  extends Omit<Omit<Subuser, 'credentials'>, 'points'> {\n  credentials: {\n    username: string;\n    password: string;\n    api_password: string;\n  };\n  points: {\n    from_account: number;\n    per_month: number;\n  };\n}\n\nexport class Subusers extends BaseModule {\n  async get(): Promise<ApiCollection<Subuser>> {\n    return await this.httpClient.get<\n      ApiCollection<Subuser>,\n      ApiCollection<Subuser>\n    >('/subusers');\n  }\n\n  async getById(subuserId: string): Promise<Subuser> {\n    return await this.httpClient.get<Subuser, Subuser>(\n      `/subusers/${subuserId}`\n    );\n  }\n\n  async create(newSubuser: NewSubuser): Promise<Subuser> {\n    const { credentials, points } = newSubuser;\n\n    return await this.httpClient.post<Subuser, Subuser>('/subusers', {\n      ...newSubuser,\n      credentials: {\n        api_password: credentials.apiPassword,\n        password: credentials.password,\n        username: credentials.username,\n      },\n      points: points\n        ? {\n            from_account: points.fromAccount,\n            per_month: points.perMonth,\n          }\n        : undefined,\n    });\n  }\n\n  async update(\n    subuserId: string,\n    updateSubuser: Partial<UpdateSubuser>\n  ): Promise<Subuser> {\n    const { credentials, points } = updateSubuser;\n\n    return await this.httpClient.put<Subuser, Subuser>(\n      `/subusers/${subuserId}`,\n      {\n        ...updateSubuser,\n        credentials:\n          credentials && (credentials.password || credentials.apiPassword)\n            ? {\n                api_password: credentials.apiPassword,\n                password: credentials.password,\n              }\n            : undefined,\n        points:\n          points && (points.fromAccount || points.perMonth)\n            ? {\n                from_account: points.fromAccount,\n                per_month: points.perMonth,\n              }\n            : undefined,\n      }\n    );\n  }\n\n  async remove(subuserId: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/subusers/${subuserId}`);\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { NewTemplate } from './types/NewTemplate';\nimport { Template } from './types/Template';\n\nexport class Templates extends BaseModule {\n  async get(): Promise<ApiCollection<Template>> {\n    return await this.httpClient.get<\n      ApiCollection<Template>,\n      ApiCollection<Template>\n    >('/sms/templates');\n  }\n\n  async getById(templateId: string): Promise<Template> {\n    return await this.httpClient.get<Template, Template>(\n      `/sms/templates/${templateId}`\n    );\n  }\n\n  async create(newTemplate: NewTemplate): Promise<Template> {\n    return await this.httpClient.post<Template, Template>(\n      '/sms/templates',\n      newTemplate\n    );\n  }\n\n  async update(\n    templateId: string,\n    newTemplate: Partial<NewTemplate>\n  ): Promise<Template> {\n    return await this.httpClient.put<Template, Template>(\n      `/sms/templates/${templateId}`,\n      newTemplate\n    );\n  }\n\n  async remove(templateId: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/sms/templates/${templateId}`);\n  }\n}\n","import { BaseMessageModule } from '../baseMessageModule';\nimport { MessageResponse } from '../../types/MessageResponse';\n\nimport { VmsTtsLector } from './types/VmsTtsLector';\nimport { VmsDetails } from './types/VmsDetails';\n\nexport class Vms extends BaseMessageModule {\n  endpoint = '/vms.do';\n\n  async sendVms(\n    numbers: string | string[],\n    tts: string,\n    ttsLector?: VmsTtsLector,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        tts,\n        ttsLector,\n      },\n      numbers,\n      undefined,\n      details\n    );\n  }\n\n  async sendVmsWithLocalFile(\n    numbers: string | string[],\n    pathToLocaleFile: string,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        localPath: pathToLocaleFile,\n      },\n      numbers,\n      undefined,\n      details\n    );\n  }\n\n  async sendVmsWithRemoteFile(\n    numbers: string | string[],\n    pathToRemoteFile: string,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        remotePath: pathToRemoteFile,\n      },\n      numbers,\n      undefined,\n      details\n    );\n  }\n\n  async sendVmsToGroup(\n    groups: string | string[],\n    tts: string,\n    ttsLector?: VmsTtsLector,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        tts,\n        ttsLector,\n      },\n      undefined,\n      groups,\n      details\n    );\n  }\n\n  async sendVmsWithLocalFileToGroup(\n    groups: string | string[],\n    pathToLocaleFile: string,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        localPath: pathToLocaleFile,\n      },\n      undefined,\n      groups,\n      details\n    );\n  }\n\n  async sendVmsWithRemoteFileToGroup(\n    groups: string | string[],\n    pathToRemoteFile: string,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        remotePath: pathToRemoteFile,\n      },\n      undefined,\n      groups,\n      details\n    );\n  }\n}\n","import { AxiosResponse } from 'axios';\nimport camelCase from 'lodash/camelCase';\nimport forEach from 'lodash/forEach';\nimport isArray from 'lodash/isArray';\nimport isObject from 'lodash/isObject';\nimport mapKeys from 'lodash/mapKeys';\n\nconst formatKeys = (\n  object: Record<string, unknown>\n): Record<string, unknown> => {\n  return mapKeys(object, (_, key) => {\n    return camelCase(key);\n  });\n};\n\nconst formatResponse = (object: Record<string, unknown>) => {\n  const newResponse = formatKeys(object);\n\n  forEach(newResponse, (value, key) => {\n    if (isObject(value)) {\n      newResponse[key] = formatKeys(value as Record<string, unknown>);\n    }\n  });\n\n  return newResponse;\n};\n\nconst isApiCollection = (data: Record<string, unknown>): boolean => {\n  return !!data.collection && !!data.size;\n};\n\nconst isSmsResponse = (data: Record<string, unknown>): boolean => {\n  return !!data.list && !!data.count;\n};\n\nexport const extractDataFromResponse = (response: AxiosResponse) => {\n  const { data } = response;\n\n  if (!data) {\n    return data;\n  }\n\n  if (isArray(data)) {\n    return data.map(formatResponse);\n  }\n\n  if (isApiCollection(data)) {\n    return {\n      ...data,\n      collection: data.collection.map(formatResponse),\n    };\n  }\n\n  if (isSmsResponse(data)) {\n    return {\n      ...data,\n      list: data.list.map(formatResponse),\n    };\n  }\n\n  return formatResponse(data);\n};\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport axios, { AxiosInstance } from 'axios';\n// @ts-ignore TS7016\nimport adapter from 'axios/lib/adapters/http';\n\nimport { Hlr } from '../modules/hlr';\nimport { Mms } from '../modules/mms';\nimport { Profile } from '../modules/profile';\nimport { Sendernames } from '../modules/sendernames';\nimport { Sms } from '../modules/sms';\nimport { Subusers } from '../modules/subusers';\nimport { Templates } from '../modules/templates';\nimport { Vms } from '../modules/vms';\n// @ts-ignore TS6059\nimport { version } from '../../package.json';\n\nimport { extractDataFromResponse } from './httpClient/extractDataFromResponse';\n/* eslint-enable @typescript-eslint/ban-ts-comment */\n\nexport class SMSAPI {\n  private apiUrl: string;\n  private accessToken: string;\n\n  private httpClient: AxiosInstance;\n\n  public hlr: Hlr;\n  public mms: Mms;\n  public profile: Profile;\n  public sendernames: Sendernames;\n  public sms: Sms;\n  public subusers: Subusers;\n  public templates: Templates;\n  public vms: Vms;\n\n  constructor(accessToken: string, apiUrl: string) {\n    this.accessToken = accessToken;\n    this.apiUrl = apiUrl;\n\n    this.httpClient = this.setHttpClient();\n\n    this.hlr = new Hlr(this.httpClient);\n    this.mms = new Mms(this.httpClient);\n    this.profile = new Profile(this.httpClient);\n    this.sendernames = new Sendernames(this.httpClient);\n    this.sms = new Sms(this.httpClient);\n    this.subusers = new Subusers(this.httpClient);\n    this.templates = new Templates(this.httpClient);\n    this.vms = new Vms(this.httpClient);\n  }\n\n  private getUserAgent(): string {\n    return `smsapi/js-client:${version}`;\n  }\n\n  private setHttpClient(): AxiosInstance {\n    const httpClient = axios.create({\n      adapter,\n      baseURL: this.apiUrl,\n      headers: {\n        Accept: 'application/json',\n        Authorization: `Bearer ${this.accessToken}`,\n        'User-Agent': this.getUserAgent(),\n      },\n    });\n\n    httpClient.interceptors.response.use(extractDataFromResponse);\n\n    return httpClient;\n  }\n}\n","import { SMSAPI } from '.';\n\nexport class SMSAPIcom extends SMSAPI {\n  constructor(accessToken: string) {\n    const API_URL = 'https://api.smsapi.com';\n\n    super(accessToken, API_URL);\n  }\n}\n","import { SMSAPI } from '.';\n\nexport class SMSAPIpl extends SMSAPI {\n  constructor(accessToken: string) {\n    const API_URL = 'https://api.smsapi.pl';\n\n    super(accessToken, API_URL);\n  }\n}\n"],"names":["BaseModule","httpClient","Hlr","check","numbers","idx","this","get","params","format","number","join","BaseMessageModule","interceptors","request","use","config","mapValues","param","send","content","to","group","details","form","FormData","headers","undefined","body","encoding","_this3","formatSmsDetails","isArray","isSms","message","trim","isMms","subject","smil","isVmsText","tts","tts_lector","ttsLector","isVmsRemotePath","file","remotePath","isVmsLocalFile","fs","createReadStream","localPath","append","getHeaders","data","method","url","endpoint","formatSmsResponse","formattedDetails","date","dateValidate","toISOString","expirationDate","mapKeys","_","key","test","toLowerCase","snakeCase","response","list","map","sms","dateSent","Date","points","parseFloat","Mms","sendMms","sendMmsToGroup","groups","Profile","Sendernames","_this2","collection","formatSendernameDates","getBySender","sender","_this4","create","_this6","post","makeDefault","remove","sendername","createdAt","Sms","sendSms","sendFlashSms","flash","sendSmsToGroup","sendFlashSmsToGroup","removeScheduledSms","smsId","ids","sch_del","Subusers","getById","subuserId","newSubuser","credentials","api_password","apiPassword","password","username","from_account","fromAccount","per_month","perMonth","update","updateSubuser","put","Templates","templateId","newTemplate","Vms","sendVms","sendVmsWithLocalFile","pathToLocaleFile","sendVmsWithRemoteFile","pathToRemoteFile","sendVmsToGroup","sendVmsWithLocalFileToGroup","sendVmsWithRemoteFileToGroup","formatKeys","object","camelCase","formatResponse","newResponse","forEach","value","isObject","extractDataFromResponse","size","isApiCollection","count","isSmsResponse","SMSAPI","accessToken","apiUrl","setHttpClient","hlr","mms","profile","sendernames","subusers","templates","vms","getUserAgent","axios","adapter","baseURL","Accept","Authorization","SMSAPIcom","_SMSAPI","SMSAPIpl"],"mappings":"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"}