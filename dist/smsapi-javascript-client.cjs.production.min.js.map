{"version":3,"file":"smsapi-javascript-client.cjs.production.min.js","sources":["../src/modules/baseModule/index.ts","../src/modules/hlr/index.ts","../src/modules/profile/index.ts","../src/modules/sendernames/index.ts","../src/modules/subusers/index.ts","../src/modules/templates/index.ts","../src/smsapi/httpClient/extractDataFromResponse/index.ts","../src/smsapi/index.ts","../src/smsapi/com.ts","../src/smsapi/pl.ts"],"sourcesContent":["import { AxiosInstance } from 'axios';\n\nexport class BaseModule {\n  protected httpClient: AxiosInstance;\n\n  constructor(httpClient: AxiosInstance) {\n    this.httpClient = httpClient;\n  }\n}\n","import { BaseModule } from '../baseModule';\n\nimport { HlrCheckResponse } from './types/HlrCheckResponse';\n\nexport class Hlr extends BaseModule {\n  async check(\n    numbers: string[],\n    idx?: string\n  ): Promise<HlrCheckResponse | HlrCheckResponse[]> {\n    return await this.httpClient.get<\n      HlrCheckResponse | HlrCheckResponse[],\n      HlrCheckResponse | HlrCheckResponse[]\n    >('/hlr.do', {\n      params: {\n        format: 'json',\n        idx,\n        number: numbers.join(','),\n      },\n    });\n  }\n}\n","import { BaseModule } from '../baseModule';\n\nimport { ProfileResponse } from './types/ProfileResponse';\n\nexport class Profile extends BaseModule {\n  async get(): Promise<ProfileResponse> {\n    return await this.httpClient.get<ProfileResponse, ProfileResponse>(\n      '/profile'\n    );\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { Sendername } from './types/Sendername';\nimport { SendernameStatus } from './types/SendernameStatus';\n\ninterface ApiSendername {\n  createdAt: string;\n  isDefault: boolean;\n  sender: string;\n  status: SendernameStatus;\n}\n\nexport class Sendernames extends BaseModule {\n  async get(): Promise<ApiCollection<Sendername>> {\n    const data = await this.httpClient.get<\n      ApiCollection<ApiSendername>,\n      ApiCollection<ApiSendername>\n    >('/sms/sendernames');\n\n    return {\n      ...data,\n      collection: data.collection.map(this.formatSendernameDates),\n    };\n  }\n\n  async getBySender(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.get<ApiSendername, ApiSendername>(\n      `/sms/sendernames/${sender}`\n    );\n\n    return this.formatSendernameDates(data);\n  }\n\n  async create(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.post<ApiSendername, ApiSendername>(\n      '/sms/sendernames',\n      {\n        sender,\n      }\n    );\n\n    return this.formatSendernameDates(data);\n  }\n\n  async makeDefault(sender: string): Promise<void> {\n    await this.httpClient.post<void, void>(\n      `/sms/sendernames/${sender}/commands/make_default`\n    );\n  }\n\n  async remove(sender: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/sms/sendernames/${sender}`);\n  }\n\n  private formatSendernameDates(sendername: ApiSendername): Sendername {\n    return {\n      ...sendername,\n      createdAt: new Date(sendername.createdAt),\n    };\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection, NewSubuser } from '../../types';\n\nimport { Subuser } from './types/Subuser';\nimport { UpdateSubuser } from './types/UpdateSubuser';\n\nexport interface ApiSubuser\n  extends Omit<Omit<Subuser, 'credentials'>, 'points'> {\n  credentials: {\n    username: string;\n    password: string;\n    api_password: string;\n  };\n  points: {\n    from_account: number;\n    per_month: number;\n  };\n}\n\nexport class Subusers extends BaseModule {\n  async get(): Promise<ApiCollection<Subuser>> {\n    return await this.httpClient.get<\n      ApiCollection<Subuser>,\n      ApiCollection<Subuser>\n    >('/subusers');\n  }\n\n  async getById(subuserId: string): Promise<Subuser> {\n    return await this.httpClient.get<Subuser, Subuser>(\n      `/subusers/${subuserId}`\n    );\n  }\n\n  async create(newSubuser: NewSubuser): Promise<Subuser> {\n    const { credentials, points } = newSubuser;\n\n    return await this.httpClient.post<Subuser, Subuser>('/subusers', {\n      ...newSubuser,\n      credentials: {\n        username: credentials.username,\n        password: credentials.password,\n        api_password: credentials.apiPassword,\n      },\n      points: points\n        ? {\n            from_account: points.fromAccount,\n            per_month: points.perMonth,\n          }\n        : undefined,\n    });\n  }\n\n  async update(\n    subuserId: string,\n    updateSubuser: Partial<UpdateSubuser>\n  ): Promise<Subuser> {\n    const { credentials, points } = updateSubuser;\n\n    return await this.httpClient.put<Subuser, Subuser>(\n      `/subusers/${subuserId}`,\n      {\n        ...updateSubuser,\n        credentials:\n          credentials && (credentials.password || credentials.apiPassword)\n            ? {\n                password: credentials.password,\n                api_password: credentials.apiPassword,\n              }\n            : undefined,\n        points:\n          points && (points.fromAccount || points.perMonth)\n            ? {\n                from_account: points.fromAccount,\n                per_month: points.perMonth,\n              }\n            : undefined,\n      }\n    );\n  }\n\n  async remove(subuserId: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/subusers/${subuserId}`);\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { NewTemplate } from './types/NewTemplate';\nimport { Template } from './types/Template';\n\nexport class Templates extends BaseModule {\n  async get(): Promise<ApiCollection<Template>> {\n    return await this.httpClient.get<\n      ApiCollection<Template>,\n      ApiCollection<Template>\n    >('/sms/templates');\n  }\n\n  async getById(templateId: string): Promise<Template> {\n    return await this.httpClient.get<Template, Template>(\n      `/sms/templates/${templateId}`\n    );\n  }\n\n  async create(newTemplate: NewTemplate): Promise<Template> {\n    return await this.httpClient.post<Template, Template>(\n      '/sms/templates',\n      newTemplate\n    );\n  }\n\n  async update(\n    templateId: string,\n    newTemplate: Partial<NewTemplate>\n  ): Promise<Template> {\n    return await this.httpClient.put<Template, Template>(\n      `/sms/templates/${templateId}`,\n      newTemplate\n    );\n  }\n\n  async remove(templateId: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/sms/templates/${templateId}`);\n  }\n}\n","import { AxiosResponse } from 'axios';\nimport camelCase from 'lodash/camelCase';\nimport forEach from 'lodash/forEach';\nimport isArray from 'lodash/isArray';\nimport isObject from 'lodash/isObject';\nimport mapKeys from 'lodash/mapKeys';\n\nconst formatKeys = (\n  object: Record<string, unknown>\n): Record<string, unknown> => {\n  return mapKeys(object, (_, key) => {\n    return camelCase(key);\n  });\n};\n\nconst formatResponse = (object: Record<string, unknown>) => {\n  const newResponse = formatKeys(object);\n\n  forEach(newResponse, (value, key) => {\n    if (isObject(value)) {\n      newResponse[key] = formatKeys(value as Record<string, unknown>);\n    }\n  });\n\n  return newResponse;\n};\n\nexport const extractDataFromResponse = (response: AxiosResponse) => {\n  const { data } = response;\n\n  if (!data) {\n    return data;\n  }\n\n  if (isArray(data)) {\n    return data.map(formatResponse);\n  }\n\n  if (data.collection && data.size) {\n    return {\n      ...data,\n      collection: data.collection.map(formatResponse),\n    };\n  }\n\n  return formatResponse(data);\n};\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport axios, { AxiosInstance } from 'axios';\n// @ts-ignore TS7016\nimport adapter from 'axios/lib/adapters/http';\n\nimport { Hlr } from '../modules/hlr';\nimport { Profile } from '../modules/profile';\nimport { Sendernames } from '../modules/sendernames';\nimport { Subusers } from '../modules/subusers';\nimport { Templates } from '../modules/templates';\n// @ts-ignore TS6059\nimport { version } from '../../package.json';\n\nimport { extractDataFromResponse } from './httpClient/extractDataFromResponse';\n/* eslint-enable @typescript-eslint/ban-ts-comment */\n\nexport class SMSAPI {\n  private apiUrl: string;\n  private accessToken: string;\n\n  private httpClient: AxiosInstance;\n\n  public hlr: Hlr;\n  public profile: Profile;\n  public sendernames: Sendernames;\n  public subusers: Subusers;\n  public templates: Templates;\n\n  constructor(accessToken: string, apiUrl: string) {\n    this.accessToken = accessToken;\n    this.apiUrl = apiUrl;\n\n    this.httpClient = this.setHttpClient();\n\n    this.hlr = new Hlr(this.httpClient);\n    this.profile = new Profile(this.httpClient);\n    this.sendernames = new Sendernames(this.httpClient);\n    this.subusers = new Subusers(this.httpClient);\n    this.templates = new Templates(this.httpClient);\n  }\n\n  private getUserAgent(): string {\n    return `smsapi/js-client:${version}`;\n  }\n\n  private setHttpClient(): AxiosInstance {\n    const httpClient = axios.create({\n      adapter,\n      baseURL: this.apiUrl,\n      headers: {\n        Accept: 'application/json',\n        Authorization: `Bearer ${this.accessToken}`,\n        'User-Agent': this.getUserAgent(),\n      },\n    });\n\n    httpClient.interceptors.response.use(extractDataFromResponse);\n\n    return httpClient;\n  }\n}\n","import { SMSAPI } from '.';\n\nexport class SMSAPIcom extends SMSAPI {\n  constructor(accessToken: string) {\n    const API_URL = 'https://api.smsapi.com';\n\n    super(accessToken, API_URL);\n  }\n}\n","import { SMSAPI } from '.';\n\nexport class SMSAPIpl extends SMSAPI {\n  constructor(accessToken: string) {\n    const API_URL = 'https://api.smsapi.pl';\n\n    super(accessToken, API_URL);\n  }\n}\n"],"names":["BaseModule","httpClient","Hlr","check","numbers","idx","this","get","params","format","number","join","Profile","Sendernames","_this2","data","collection","map","formatSendernameDates","getBySender","sender","_this4","create","_this6","post","makeDefault","remove","sendername","createdAt","Date","Subusers","getById","subuserId","newSubuser","credentials","points","username","password","api_password","apiPassword","from_account","fromAccount","per_month","perMonth","undefined","update","updateSubuser","put","Templates","templateId","newTemplate","formatKeys","object","mapKeys","_","key","camelCase","formatResponse","newResponse","forEach","value","isObject","extractDataFromResponse","response","isArray","size","SMSAPI","accessToken","apiUrl","setHttpClient","hlr","profile","sendernames","subusers","templates","getUserAgent","axios","adapter","baseURL","headers","Accept","Authorization","interceptors","use","SMSAPIcom","_SMSAPI","SMSAPIpl"],"mappings":"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"}