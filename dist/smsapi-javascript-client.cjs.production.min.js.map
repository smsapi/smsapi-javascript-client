{"version":3,"file":"smsapi-javascript-client.cjs.production.min.js","sources":["../src/modules/baseModule/index.ts","../src/modules/hlr/index.ts","../src/modules/profile/index.ts","../src/modules/sendernames/helpers/dateFormatter/index.ts","../src/modules/sendernames/index.ts","../src/modules/templates/index.ts","../src/smsapi/httpClient/extractDataFromResponse/index.ts","../src/smsapi/index.ts","../src/smsapi/com.ts","../src/smsapi/pl.ts"],"sourcesContent":["import { AxiosInstance } from 'axios';\n\nexport class BaseModule {\n  protected httpClient: AxiosInstance;\n\n  constructor(httpClient: AxiosInstance) {\n    this.httpClient = httpClient;\n  }\n}\n","import { BaseModule } from '../baseModule';\n\nimport { HlrCheckResponse } from './types/HlrCheckResponse';\n\nexport class Hlr extends BaseModule {\n  async check(\n    numbers: string[],\n    idx?: string\n  ): Promise<HlrCheckResponse | HlrCheckResponse[]> {\n    return await this.httpClient.get<\n      any,\n      HlrCheckResponse | HlrCheckResponse[]\n    >('/hlr.do', {\n      params: {\n        format: 'json',\n        idx,\n        number: numbers.join(','),\n      },\n    });\n  }\n}\n","import { BaseModule } from '../baseModule';\n\nimport { ProfileResponse } from './types/ProfileResponse';\n\nexport class Profile extends BaseModule {\n  async get(): Promise<ProfileResponse> {\n    return await this.httpClient.get<any, ProfileResponse>('/profile');\n  }\n}\n","import { Sendername } from '../../types/Sendername';\nimport { ApiSendername } from '../../';\n\nexport const dateFormatter = (sendername: ApiSendername): Sendername => ({\n  ...sendername,\n  createdAt: new Date(sendername.createdAt),\n});\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { Sendername } from './types/Sendername';\nimport { SendernameStatus } from './types/SendernameStatus';\nimport { dateFormatter } from './helpers/dateFormatter';\n\nexport interface ApiSendername {\n  createdAt: string;\n  isDefault: boolean;\n  sender: string;\n  status: SendernameStatus;\n}\n\nexport class Sendernames extends BaseModule {\n  async get(): Promise<ApiCollection<Sendername>> {\n    const data = await this.httpClient.get<any, ApiCollection<ApiSendername>>(\n      '/sms/sendernames'\n    );\n\n    return {\n      ...data,\n      collection: data.collection.map(dateFormatter),\n    };\n  }\n\n  async getBySender(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.get<any, ApiSendername>(\n      `/sms/sendernames/${sender}`\n    );\n\n    return dateFormatter(data);\n  }\n\n  async create(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.post<any, ApiSendername>(\n      '/sms/sendernames',\n      {\n        sender,\n      }\n    );\n\n    return dateFormatter(data);\n  }\n\n  async makeDefault(sender: string): Promise<void> {\n    await this.httpClient.post<any, void>(\n      `/sms/sendernames/${sender}/commands/make_default`\n    );\n  }\n\n  async remove(sender: string): Promise<void> {\n    await this.httpClient.delete<any, void>(`/sms/sendernames/${sender}`);\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { NewTemplate } from './types/NewTemplate';\nimport { Template } from './types/Template';\n\nexport class Templates extends BaseModule {\n  async get(): Promise<ApiCollection<Template>> {\n    return await this.httpClient.get<any, ApiCollection<Template>>(\n      '/sms/templates'\n    );\n  }\n\n  async getById(templateId: string): Promise<Template> {\n    return await this.httpClient.get<any, Template>(\n      `/sms/templates/${templateId}`\n    );\n  }\n\n  async create(newTemplate: NewTemplate): Promise<Template> {\n    return await this.httpClient.post<any, Template>(\n      '/sms/templates',\n      newTemplate\n    );\n  }\n\n  async update(\n    templateId: string,\n    newTemplate: Partial<NewTemplate>\n  ): Promise<Template> {\n    return await this.httpClient.put<any, Template>(\n      `/sms/templates/${templateId}`,\n      newTemplate\n    );\n  }\n\n  async remove(templateId: string): Promise<void> {\n    await this.httpClient.delete<any, void>(`/sms/templates/${templateId}`);\n  }\n}\n","import { AxiosResponse } from 'axios';\nimport camelCase from 'lodash/camelCase';\nimport isArray from 'lodash/isArray';\nimport mapKeys from 'lodash/mapKeys';\n\nconst formatResponse = (object: any) => {\n  return mapKeys(object, (_, key) => {\n    return camelCase(key);\n  });\n};\n\nexport const extractDataFromResponse = (response: AxiosResponse) => {\n  const { data } = response;\n\n  if (!data) {\n    return data;\n  }\n\n  if (isArray(data)) {\n    return data.map(formatResponse);\n  }\n\n  if (data.collection && data.size) {\n    return {\n      ...data,\n      collection: data.collection.map(formatResponse),\n    };\n  }\n\n  return formatResponse(data);\n};\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport axios, { AxiosInstance } from 'axios';\n// @ts-ignore TS7016\nimport adapter from 'axios/lib/adapters/http';\n\nimport { Hlr } from '../modules/hlr';\nimport { Profile } from '../modules/profile';\nimport { Sendernames } from '../modules/sendernames';\nimport { Templates } from '../modules/templates';\n// @ts-ignore TS6059\nimport { version } from '../../package.json';\n\nimport { extractDataFromResponse } from './httpClient/extractDataFromResponse';\n/* eslint-enable @typescript-eslint/ban-ts-comment */\n\nexport class SMSAPI {\n  private apiUrl: string;\n  private accessToken: string;\n\n  private httpClient: AxiosInstance;\n\n  public hlr: Hlr;\n  public profile: Profile;\n  public sendernames: Sendernames;\n  public templates: Templates;\n\n  constructor(accessToken: string, apiUrl: string) {\n    this.accessToken = accessToken;\n    this.apiUrl = apiUrl;\n\n    this.httpClient = this.setHttpClient();\n\n    this.hlr = new Hlr(this.httpClient);\n    this.profile = new Profile(this.httpClient);\n    this.sendernames = new Sendernames(this.httpClient);\n    this.templates = new Templates(this.httpClient);\n  }\n\n  private getUserAgent(): string {\n    return `smsapi/js-client:${version}`;\n  }\n\n  private setHttpClient(): AxiosInstance {\n    const httpClient = axios.create({\n      adapter,\n      baseURL: this.apiUrl,\n      headers: {\n        Accept: 'application/json',\n        Authorization: `Bearer ${this.accessToken}`,\n        'User-Agent': this.getUserAgent(),\n      },\n    });\n\n    httpClient.interceptors.response.use(extractDataFromResponse);\n\n    return httpClient;\n  }\n}\n","import { SMSAPI } from '.';\n\nexport class SMSAPIcom extends SMSAPI {\n  constructor(accessToken: string) {\n    const API_URL = 'https://api.smsapi.com';\n\n    super(accessToken, API_URL);\n  }\n}\n","import { SMSAPI } from '.';\n\nexport class SMSAPIpl extends SMSAPI {\n  constructor(accessToken: string) {\n    const API_URL = 'https://api.smsapi.pl';\n\n    super(accessToken, API_URL);\n  }\n}\n"],"names":["BaseModule","httpClient","Hlr","check","numbers","idx","this","get","params","format","number","join","Profile","dateFormatter","sendername","createdAt","Date","Sendernames","data","collection","map","getBySender","sender","create","post","makeDefault","remove","Templates","getById","templateId","newTemplate","update","put","formatResponse","object","mapKeys","_","key","camelCase","extractDataFromResponse","response","isArray","size","SMSAPI","accessToken","apiUrl","setHttpClient","hlr","profile","sendernames","templates","getUserAgent","axios","adapter","baseURL","headers","Accept","Authorization","interceptors","use","SMSAPIcom","_SMSAPI","SMSAPIpl"],"mappings":"6lBAEaA,EAGX,SAAYC,QACLA,WAAaA,GCFTC,0FACLC,eACJC,EACAC,8BAEaC,KAAKL,WAAWM,IAG3B,UAAW,CACXC,OAAQ,CACNC,OAAQ,OACRJ,IAAAA,EACAK,OAAQN,EAAQO,KAAK,gDAZJX,GCAZY,0FACLL,0CACSD,KAAKL,WAAWM,IAA0B,oDAF9BP,GCDhBa,EAAgB,SAACC,eACzBA,GACHC,UAAW,IAAIC,KAAKF,EAAWC,cCSpBE,kGACLV,0CACeD,KAAKL,WAAWM,IACjC,oCADIW,eAKDA,GACHC,WAAYD,EAAKC,WAAWC,IAAIP,8CAI9BQ,qBAAYC,8BACGhB,KAAKL,WAAWM,wBACbe,SAGfT,yCAGHU,gBAAOD,8BACQhB,KAAKL,WAAWuB,KACjC,mBACA,CACEF,OAAAA,UAIGT,yCAGHY,qBAAYH,8BACVhB,KAAKL,WAAWuB,yBACAF,wFAIlBI,gBAAOJ,8BACLhB,KAAKL,sCAAiDqB,gEAtC/BtB,GCRpB2B,kGACLpB,0CACSD,KAAKL,WAAWM,IAC3B,yDAIEqB,iBAAQC,8BACCvB,KAAKL,WAAWM,sBACTsB,0CAIhBN,gBAAOO,8BACExB,KAAKL,WAAWuB,KAC3B,iBACAM,0CAIEC,gBACJF,EACAC,8BAEaxB,KAAKL,WAAW+B,sBACTH,EAClBC,0CAIEJ,gBAAOG,8BACLvB,KAAKL,oCAA+C4B,gEA/B/B7B,GCDzBiC,EAAiB,SAACC,UACfC,EAAQD,GAAQ,SAACE,EAAGC,UAClBC,EAAUD,OAIRE,EAA0B,SAACC,OAC9BtB,EAASsB,EAATtB,YAEHA,EAIDuB,EAAQvB,GACHA,EAAKE,IAAIa,GAGdf,EAAKC,YAAcD,EAAKwB,UAErBxB,GACHC,WAAYD,EAAKC,WAAWC,IAAIa,KAI7BA,EAAef,GAdbA,GCAEyB,wBAWCC,EAAqBC,QAC1BD,YAAcA,OACdC,OAASA,OAET5C,WAAaK,KAAKwC,qBAElBC,IAAM,IAAI7C,EAAII,KAAKL,iBACnB+C,QAAU,IAAIpC,EAAQN,KAAKL,iBAC3BgD,YAAc,IAAIhC,EAAYX,KAAKL,iBACnCiD,UAAY,IAAIvB,EAAUrB,KAAKL,uCAG9BkD,aAAA,6CAIAL,cAAA,eACA7C,EAAamD,EAAM7B,OAAO,CAC9B8B,QAAAA,EACAC,QAAShD,KAAKuC,OACdU,QAAS,CACPC,OAAQ,mBACRC,wBAAyBnD,KAAKsC,yBAChBtC,KAAK6C,yBAIvBlD,EAAWyD,aAAalB,SAASmB,IAAIpB,GAE9BtC,QCrDE2D,yBACChB,UAGViB,YAAMjB,EAFU,iDAFWD,GCAlBmB,yBACClB,UAGViB,YAAMjB,EAFU,gDAFUD"}