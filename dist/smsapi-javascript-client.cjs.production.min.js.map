{"version":3,"file":"smsapi-javascript-client.cjs.production.min.js","sources":["../src/modules/baseModule/index.ts","../src/modules/contacts/index.ts","../src/modules/hlr/index.ts","../src/modules/baseMessageModule/index.ts","../src/modules/mms/index.ts","../src/modules/profile/index.ts","../src/modules/sendernames/index.ts","../src/modules/sms/index.ts","../src/modules/subusers/index.ts","../src/modules/templates/index.ts","../src/modules/vms/index.ts","../src/smsapi/httpClient/extractDataFromResponse/index.ts","../src/smsapi/index.ts","../src/smsapi/com.ts","../src/smsapi/pl.ts"],"sourcesContent":["import { AxiosInstance } from 'axios';\n\nexport class BaseModule {\n  protected httpClient: AxiosInstance;\n\n  constructor(httpClient: AxiosInstance) {\n    this.httpClient = httpClient;\n  }\n}\n","import { stringify } from 'querystring';\n\nimport { AxiosInstance } from 'axios';\nimport mapKeys from 'lodash/mapKeys';\nimport mapValues from 'lodash/mapValues';\nimport isArray from 'lodash/isArray';\nimport snakeCase from 'lodash/snakeCase';\n\nimport { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types/ApiCollection';\n\nimport { Contact } from './types/Contact';\nimport { NewContact } from './types/NewContact';\nimport { GetContactsQueryParams } from './types/GetContactsQueryParams';\n\nexport class Contacts extends BaseModule {\n  constructor(httpClient: AxiosInstance) {\n    super(httpClient);\n\n    this.httpClient.interceptors.request.use((config) => {\n      const { data, method, params } = config;\n\n      if (method?.toLowerCase() === 'get') {\n        let formattedParams = mapValues(params, (value, key) => {\n          if (key === 'birthdayDate') {\n            if (isArray(value)) {\n              return value.map(this.formatDate);\n            }\n\n            return this.formatDate(value);\n          }\n\n          return value;\n        });\n\n        formattedParams = mapKeys(formattedParams, (_, key) => {\n          return snakeCase(key);\n        });\n\n        return {\n          ...config,\n          params: formattedParams,\n          paramsSerializer: (params) => stringify(params),\n        };\n      }\n\n      if (data) {\n        return {\n          ...config,\n          data: stringify(data),\n        };\n      }\n\n      return config;\n    });\n  }\n\n  async get(params?: GetContactsQueryParams): Promise<ApiCollection<Contact>> {\n    return await this.httpClient.get<\n      ApiCollection<Contact>,\n      ApiCollection<Contact>\n    >('/contacts', {\n      params,\n    });\n  }\n\n  async create(phoneNumber: string, details?: NewContact): Promise<Contact> {\n    return await this.httpClient.post<Contact, Contact>('/contacts', {\n      phone_number: phoneNumber,\n      ...this.formatContactDetails(details || {}),\n    });\n  }\n\n  async remove(contactId: string): Promise<void> {\n    await this.httpClient.delete(`/contacts/${contactId}`);\n  }\n\n  private formatDate(date: Date): string {\n    return date.toISOString().slice(0, 10);\n  }\n\n  private formatContactDetails(details: NewContact): Record<string, unknown> {\n    const formattedDetails = details as Record<string, unknown>;\n\n    if (details.birthdayDate) {\n      formattedDetails.birthdayDate = this.formatDate(details.birthdayDate);\n    }\n\n    return mapKeys(formattedDetails, (_, key) => {\n      return snakeCase(key);\n    });\n  }\n}\n","import { BaseModule } from '../baseModule';\n\nimport { HlrCheckResponse } from './types/HlrCheckResponse';\n\nexport class Hlr extends BaseModule {\n  async check(\n    numbers: string[],\n    idx?: string\n  ): Promise<HlrCheckResponse | HlrCheckResponse[]> {\n    return await this.httpClient.get<\n      HlrCheckResponse | HlrCheckResponse[],\n      HlrCheckResponse | HlrCheckResponse[]\n    >('/hlr.do', {\n      params: {\n        format: 'json',\n        idx,\n        number: numbers.join(','),\n      },\n    });\n  }\n}\n","import fs from 'fs';\n\nimport isArray from 'lodash/isArray';\nimport mapKeys from 'lodash/mapKeys';\nimport mapValues from 'lodash/mapValues';\nimport snakeCase from 'lodash/snakeCase';\nimport FormData from 'form-data';\nimport { AxiosRequestConfig, AxiosInstance } from 'axios';\n\nimport { BaseModule } from '../baseModule';\nimport { SmsDetails } from '../sms/types/SmsDetails';\nimport { MessageResponse } from '../../types/MessageResponse';\n\nimport {\n  MessageContent,\n  SmsContent,\n  MmsContent,\n  VmsTextContent,\n  VmsLocalFileContent,\n  VmsRemoteFileContent,\n} from './types/MessageContent';\n\ninterface SmsApiDetails {\n  [key: string]: unknown;\n}\n\nexport class BaseMessageModule extends BaseModule {\n  protected endpoint: string;\n\n  constructor(httpClient: AxiosInstance) {\n    super(httpClient);\n\n    this.httpClient.interceptors.request.use((config) => {\n      const params = config.params;\n\n      return {\n        ...config,\n        params: mapValues(params, (param) => {\n          if (typeof param !== 'boolean') {\n            return param;\n          }\n\n          return +param;\n        }),\n      };\n    });\n  }\n\n  protected async send(\n    content: MessageContent,\n    to?: string | string[],\n    group?: string | string[],\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    const form = new FormData();\n    let headers: AxiosRequestConfig | undefined = undefined;\n\n    const body: Record<string, unknown> = {\n      details: true,\n      encoding: 'utf-8',\n      format: 'json',\n      ...this.formatSmsDetails(details || {}),\n    };\n\n    if (to) {\n      body.to = isArray(to) ? to.join(',') : to;\n    } else {\n      body.group = isArray(group) ? group.join(',') : group;\n    }\n\n    if (this.isSms(content)) {\n      body.message = content.message.trim();\n    }\n\n    if (this.isMms(content)) {\n      body.subject = content.subject.trim();\n      body.smil = content.smil;\n    }\n\n    if (this.isVmsText(content)) {\n      body.tts = content.tts.trim();\n      body.tts_lector = content.ttsLector || 'ewa';\n    }\n\n    if (this.isVmsRemotePath(content)) {\n      body.file = content.remotePath;\n    }\n\n    if (this.isVmsLocalFile(content)) {\n      const file = fs.createReadStream(content.localPath);\n\n      form.append('file', file);\n\n      headers = form.getHeaders();\n    }\n\n    const data = await this.httpClient.request<\n      MessageResponse,\n      MessageResponse\n    >({\n      data: form,\n      headers,\n      method: 'post',\n      params: body,\n      url: this.endpoint,\n    });\n\n    return this.formatSmsResponse(data);\n  }\n\n  private isSms(content: MessageContent): content is SmsContent {\n    return (content as SmsContent).message !== undefined;\n  }\n\n  private isMms(content: MessageContent): content is MmsContent {\n    return (\n      (content as MmsContent).smil !== undefined &&\n      (content as MmsContent).subject !== undefined\n    );\n  }\n\n  private isVmsText(content: MessageContent): content is VmsTextContent {\n    return (content as VmsTextContent).tts !== undefined;\n  }\n\n  private isVmsLocalFile(\n    content: MessageContent\n  ): content is VmsLocalFileContent {\n    return (content as VmsLocalFileContent).localPath !== undefined;\n  }\n\n  private isVmsRemotePath(\n    content: MessageContent\n  ): content is VmsRemoteFileContent {\n    return (content as VmsRemoteFileContent).remotePath !== undefined;\n  }\n\n  private formatSmsDetails(details: SmsDetails): SmsApiDetails {\n    const formattedDetails = details as Record<string, unknown>;\n\n    if (details.date) {\n      formattedDetails.dateValidate = true;\n      formattedDetails.date = details.date.toISOString();\n    }\n\n    if (details.expirationDate) {\n      formattedDetails.expirationDate = details.expirationDate.toISOString();\n    }\n\n    return mapKeys(formattedDetails, (_, key) => {\n      if (/param[1-4]/.test(key)) {\n        return key;\n      }\n\n      if (key === 'noUnicode') {\n        return key.toLowerCase();\n      }\n\n      return snakeCase(key);\n    });\n  }\n\n  protected formatSmsResponse(response: MessageResponse): MessageResponse {\n    return {\n      ...response,\n      list: response.list.map((sms) => ({\n        ...sms,\n        dateSent: new Date(sms.dateSent),\n        points:\n          typeof sms.points === 'string' ? parseFloat(sms.points) : sms.points,\n      })),\n    };\n  }\n}\n","import { BaseMessageModule } from '../baseMessageModule';\nimport { MessageResponse } from '../../types/MessageResponse';\n\nimport { MmsDetails } from './types/MmsDetails';\n\nexport class Mms extends BaseMessageModule {\n  endpoint = '/mms.do';\n\n  async sendMms(\n    numbers: string | string[],\n    subject: string,\n    smil: string,\n    details?: MmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        smil,\n        subject,\n      },\n      numbers,\n      undefined,\n      details\n    );\n  }\n\n  async sendMmsToGroup(\n    groups: string | string[],\n    subject: string,\n    smil: string,\n    details?: MmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        smil,\n        subject,\n      },\n      undefined,\n      groups,\n      details\n    );\n  }\n}\n","import { BaseModule } from '../baseModule';\n\nimport { ProfileResponse } from './types/ProfileResponse';\n\nexport class Profile extends BaseModule {\n  async get(): Promise<ProfileResponse> {\n    return await this.httpClient.get<ProfileResponse, ProfileResponse>(\n      '/profile'\n    );\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { Sendername } from './types/Sendername';\nimport { SendernameStatus } from './types/SendernameStatus';\n\ninterface ApiSendername {\n  createdAt: string;\n  isDefault: boolean;\n  sender: string;\n  status: SendernameStatus;\n}\n\nexport class Sendernames extends BaseModule {\n  async get(): Promise<ApiCollection<Sendername>> {\n    const data = await this.httpClient.get<\n      ApiCollection<ApiSendername>,\n      ApiCollection<ApiSendername>\n    >('/sms/sendernames');\n\n    return {\n      ...data,\n      collection: data.collection.map(this.formatSendernameDates),\n    };\n  }\n\n  async getBySender(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.get<ApiSendername, ApiSendername>(\n      `/sms/sendernames/${sender}`\n    );\n\n    return this.formatSendernameDates(data);\n  }\n\n  async create(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.post<ApiSendername, ApiSendername>(\n      '/sms/sendernames',\n      {\n        sender,\n      }\n    );\n\n    return this.formatSendernameDates(data);\n  }\n\n  async makeDefault(sender: string): Promise<void> {\n    await this.httpClient.post<void, void>(\n      `/sms/sendernames/${sender}/commands/make_default`\n    );\n  }\n\n  async remove(sender: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/sms/sendernames/${sender}`);\n  }\n\n  private formatSendernameDates(sendername: ApiSendername): Sendername {\n    return {\n      ...sendername,\n      createdAt: new Date(sendername.createdAt),\n    };\n  }\n}\n","import isArray from 'lodash/isArray';\n\nimport { BaseMessageModule } from '../baseMessageModule';\nimport { MessageResponse } from '../../types/MessageResponse';\n\nimport { ScheduledSmsResponse } from './types/ScheduledSmsResponse';\nimport { SmsDetails } from './types/SmsDetails';\n\nexport class Sms extends BaseMessageModule {\n  endpoint = '/sms.do';\n\n  async sendSms(\n    numbers: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        message,\n      },\n      numbers,\n      undefined,\n      details\n    );\n  }\n\n  async sendFlashSms(\n    numbers: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.sendSms(numbers, message, { ...details, flash: true });\n  }\n\n  async sendSmsToGroup(\n    groups: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        message,\n      },\n      undefined,\n      groups,\n      details\n    );\n  }\n\n  async sendFlashSmsToGroup(\n    groups: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.sendSmsToGroup(groups, message, {\n      ...details,\n      flash: true,\n    });\n  }\n\n  async removeScheduledSms(\n    smsId: string | string[]\n  ): Promise<ScheduledSmsResponse> {\n    const ids = isArray(smsId) ? smsId.join(',') : smsId;\n\n    return await this.httpClient.post<\n      ScheduledSmsResponse,\n      ScheduledSmsResponse\n    >(this.endpoint, {\n      format: 'json',\n      sch_del: ids,\n    });\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection, NewSubuser } from '../../types';\n\nimport { Subuser } from './types/Subuser';\nimport { UpdateSubuser } from './types/UpdateSubuser';\n\nexport interface ApiSubuser\n  extends Omit<Omit<Subuser, 'credentials'>, 'points'> {\n  credentials: {\n    username: string;\n    password: string;\n    api_password: string;\n  };\n  points: {\n    from_account: number;\n    per_month: number;\n  };\n}\n\nexport class Subusers extends BaseModule {\n  async get(): Promise<ApiCollection<Subuser>> {\n    return await this.httpClient.get<\n      ApiCollection<Subuser>,\n      ApiCollection<Subuser>\n    >('/subusers');\n  }\n\n  async getById(subuserId: string): Promise<Subuser> {\n    return await this.httpClient.get<Subuser, Subuser>(\n      `/subusers/${subuserId}`\n    );\n  }\n\n  async create(newSubuser: NewSubuser): Promise<Subuser> {\n    const { credentials, points } = newSubuser;\n\n    return await this.httpClient.post<Subuser, Subuser>('/subusers', {\n      ...newSubuser,\n      credentials: {\n        api_password: credentials.apiPassword,\n        password: credentials.password,\n        username: credentials.username,\n      },\n      points: points\n        ? {\n            from_account: points.fromAccount,\n            per_month: points.perMonth,\n          }\n        : undefined,\n    });\n  }\n\n  async update(\n    subuserId: string,\n    updateSubuser: Partial<UpdateSubuser>\n  ): Promise<Subuser> {\n    const { credentials, points } = updateSubuser;\n\n    return await this.httpClient.put<Subuser, Subuser>(\n      `/subusers/${subuserId}`,\n      {\n        ...updateSubuser,\n        credentials:\n          credentials && (credentials.password || credentials.apiPassword)\n            ? {\n                api_password: credentials.apiPassword,\n                password: credentials.password,\n              }\n            : undefined,\n        points:\n          points && (points.fromAccount || points.perMonth)\n            ? {\n                from_account: points.fromAccount,\n                per_month: points.perMonth,\n              }\n            : undefined,\n      }\n    );\n  }\n\n  async remove(subuserId: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/subusers/${subuserId}`);\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { NewTemplate } from './types/NewTemplate';\nimport { Template } from './types/Template';\n\nexport class Templates extends BaseModule {\n  async get(): Promise<ApiCollection<Template>> {\n    return await this.httpClient.get<\n      ApiCollection<Template>,\n      ApiCollection<Template>\n    >('/sms/templates');\n  }\n\n  async getById(templateId: string): Promise<Template> {\n    return await this.httpClient.get<Template, Template>(\n      `/sms/templates/${templateId}`\n    );\n  }\n\n  async create(newTemplate: NewTemplate): Promise<Template> {\n    return await this.httpClient.post<Template, Template>(\n      '/sms/templates',\n      newTemplate\n    );\n  }\n\n  async update(\n    templateId: string,\n    newTemplate: Partial<NewTemplate>\n  ): Promise<Template> {\n    return await this.httpClient.put<Template, Template>(\n      `/sms/templates/${templateId}`,\n      newTemplate\n    );\n  }\n\n  async remove(templateId: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/sms/templates/${templateId}`);\n  }\n}\n","import { BaseMessageModule } from '../baseMessageModule';\nimport { MessageResponse } from '../../types/MessageResponse';\n\nimport { VmsTtsLector } from './types/VmsTtsLector';\nimport { VmsDetails } from './types/VmsDetails';\n\nexport class Vms extends BaseMessageModule {\n  endpoint = '/vms.do';\n\n  async sendVms(\n    numbers: string | string[],\n    tts: string,\n    ttsLector?: VmsTtsLector,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        tts,\n        ttsLector,\n      },\n      numbers,\n      undefined,\n      details\n    );\n  }\n\n  async sendVmsWithLocalFile(\n    numbers: string | string[],\n    pathToLocaleFile: string,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        localPath: pathToLocaleFile,\n      },\n      numbers,\n      undefined,\n      details\n    );\n  }\n\n  async sendVmsWithRemoteFile(\n    numbers: string | string[],\n    pathToRemoteFile: string,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        remotePath: pathToRemoteFile,\n      },\n      numbers,\n      undefined,\n      details\n    );\n  }\n\n  async sendVmsToGroup(\n    groups: string | string[],\n    tts: string,\n    ttsLector?: VmsTtsLector,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        tts,\n        ttsLector,\n      },\n      undefined,\n      groups,\n      details\n    );\n  }\n\n  async sendVmsWithLocalFileToGroup(\n    groups: string | string[],\n    pathToLocaleFile: string,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        localPath: pathToLocaleFile,\n      },\n      undefined,\n      groups,\n      details\n    );\n  }\n\n  async sendVmsWithRemoteFileToGroup(\n    groups: string | string[],\n    pathToRemoteFile: string,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        remotePath: pathToRemoteFile,\n      },\n      undefined,\n      groups,\n      details\n    );\n  }\n}\n","import { AxiosResponse } from 'axios';\nimport camelCase from 'lodash/camelCase';\nimport forEach from 'lodash/forEach';\nimport isArray from 'lodash/isArray';\nimport isObject from 'lodash/isObject';\nimport mapKeys from 'lodash/mapKeys';\n\nconst formatKeys = (\n  object: Record<string, unknown>\n): Record<string, unknown> => {\n  return mapKeys(object, (_, key) => {\n    return camelCase(key);\n  });\n};\n\nconst formatResponse = (object: Record<string, unknown>) => {\n  const newResponse = formatKeys(object);\n\n  forEach(newResponse, (value, key) => {\n    if (isObject(value)) {\n      newResponse[key] = formatKeys(value as Record<string, unknown>);\n    }\n  });\n\n  return newResponse;\n};\n\nconst isApiCollection = (data: Record<string, unknown>): boolean => {\n  return !!data.collection && !!data.size;\n};\n\nconst isSmsResponse = (data: Record<string, unknown>): boolean => {\n  return !!data.list && !!data.count;\n};\n\nexport const extractDataFromResponse = (response: AxiosResponse) => {\n  const { data } = response;\n\n  if (!data) {\n    return data;\n  }\n\n  if (isArray(data)) {\n    return data.map(formatResponse);\n  }\n\n  if (isApiCollection(data)) {\n    return {\n      ...data,\n      collection: data.collection.map(formatResponse),\n    };\n  }\n\n  if (isSmsResponse(data)) {\n    return {\n      ...data,\n      list: data.list.map(formatResponse),\n    };\n  }\n\n  return formatResponse(data);\n};\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport axios, { AxiosInstance } from 'axios';\n// @ts-ignore TS7016\nimport adapter from 'axios/lib/adapters/http';\n\nimport { Contacts } from '../modules/contacts';\nimport { Hlr } from '../modules/hlr';\nimport { Mms } from '../modules/mms';\nimport { Profile } from '../modules/profile';\nimport { Sendernames } from '../modules/sendernames';\nimport { Sms } from '../modules/sms';\nimport { Subusers } from '../modules/subusers';\nimport { Templates } from '../modules/templates';\nimport { Vms } from '../modules/vms';\n// @ts-ignore TS6059\nimport { version } from '../../package.json';\n\nimport { extractDataFromResponse } from './httpClient/extractDataFromResponse';\n/* eslint-enable @typescript-eslint/ban-ts-comment */\n\nexport class SMSAPI {\n  private apiUrl: string;\n  private accessToken: string;\n\n  private httpClient: AxiosInstance;\n\n  public contacts: Contacts;\n  public hlr: Hlr;\n  public mms: Mms;\n  public profile: Profile;\n  public sendernames: Sendernames;\n  public sms: Sms;\n  public subusers: Subusers;\n  public templates: Templates;\n  public vms: Vms;\n\n  constructor(accessToken: string, apiUrl: string) {\n    this.accessToken = accessToken;\n    this.apiUrl = apiUrl;\n\n    this.httpClient = this.setHttpClient();\n\n    this.contacts = new Contacts(this.httpClient);\n    this.hlr = new Hlr(this.httpClient);\n    this.mms = new Mms(this.httpClient);\n    this.profile = new Profile(this.httpClient);\n    this.sendernames = new Sendernames(this.httpClient);\n    this.sms = new Sms(this.httpClient);\n    this.subusers = new Subusers(this.httpClient);\n    this.templates = new Templates(this.httpClient);\n    this.vms = new Vms(this.httpClient);\n  }\n\n  private getUserAgent(): string {\n    return `smsapi/js-client:${version}`;\n  }\n\n  private setHttpClient(): AxiosInstance {\n    const httpClient = axios.create({\n      adapter,\n      baseURL: this.apiUrl,\n      headers: {\n        Accept: 'application/json',\n        Authorization: `Bearer ${this.accessToken}`,\n        'User-Agent': this.getUserAgent(),\n      },\n    });\n\n    httpClient.interceptors.response.use(extractDataFromResponse);\n\n    return httpClient;\n  }\n}\n","import { SMSAPI } from '.';\n\nexport class SMSAPIcom extends SMSAPI {\n  constructor(accessToken: string) {\n    const API_URL = 'https://api.smsapi.com';\n\n    super(accessToken, API_URL);\n  }\n}\n","import { SMSAPI } from '.';\n\nexport class SMSAPIpl extends SMSAPI {\n  constructor(accessToken: string) {\n    const API_URL = 'https://api.smsapi.pl';\n\n    super(accessToken, API_URL);\n  }\n}\n"],"names":["BaseModule","httpClient","Contacts","interceptors","request","use","config","data","method","params","toLowerCase","formattedParams","mapValues","value","key","isArray","map","_this","formatDate","mapKeys","_","snakeCase","paramsSerializer","stringify","get","this","create","phoneNumber","details","post","phone_number","formatContactDetails","remove","contactId","date","toISOString","slice","formattedDetails","birthdayDate","Hlr","check","numbers","idx","format","number","join","BaseMessageModule","param","send","content","to","group","form","FormData","headers","undefined","body","encoding","_this3","formatSmsDetails","isSms","message","trim","isMms","subject","smil","isVmsText","tts","tts_lector","ttsLector","isVmsRemotePath","file","remotePath","isVmsLocalFile","fs","createReadStream","localPath","append","getHeaders","url","endpoint","formatSmsResponse","dateValidate","expirationDate","test","response","list","sms","dateSent","Date","points","parseFloat","Mms","sendMms","sendMmsToGroup","groups","Profile","Sendernames","_this2","collection","formatSendernameDates","getBySender","sender","_this4","_this6","makeDefault","sendername","createdAt","Sms","sendSms","sendFlashSms","flash","sendSmsToGroup","sendFlashSmsToGroup","removeScheduledSms","smsId","ids","sch_del","Subusers","getById","subuserId","newSubuser","credentials","api_password","apiPassword","password","username","from_account","fromAccount","per_month","perMonth","update","updateSubuser","put","Templates","templateId","newTemplate","Vms","sendVms","sendVmsWithLocalFile","pathToLocaleFile","sendVmsWithRemoteFile","pathToRemoteFile","sendVmsToGroup","sendVmsWithLocalFileToGroup","sendVmsWithRemoteFileToGroup","formatKeys","object","camelCase","formatResponse","newResponse","forEach","isObject","extractDataFromResponse","size","isApiCollection","count","isSmsResponse","SMSAPI","accessToken","apiUrl","setHttpClient","contacts","hlr","mms","profile","sendernames","subusers","templates","vms","getUserAgent","axios","adapter","baseURL","Accept","Authorization","SMSAPIcom","_SMSAPI","SMSAPIpl"],"mappings":"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"}