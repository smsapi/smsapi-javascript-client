{"version":3,"file":"smsapi-javascript-client.cjs.production.min.js","sources":["../src/modules/baseModule/index.ts","../src/modules/hlr/index.ts","../src/modules/profile/index.ts","../src/modules/sendernames/index.ts","../src/modules/sms/index.ts","../src/modules/subusers/index.ts","../src/modules/templates/index.ts","../src/smsapi/httpClient/extractDataFromResponse/index.ts","../src/smsapi/index.ts","../src/smsapi/com.ts","../src/smsapi/pl.ts"],"sourcesContent":["import { AxiosInstance } from 'axios';\n\nexport class BaseModule {\n  protected httpClient: AxiosInstance;\n\n  constructor(httpClient: AxiosInstance) {\n    this.httpClient = httpClient;\n  }\n}\n","import { BaseModule } from '../baseModule';\n\nimport { HlrCheckResponse } from './types/HlrCheckResponse';\n\nexport class Hlr extends BaseModule {\n  async check(\n    numbers: string[],\n    idx?: string\n  ): Promise<HlrCheckResponse | HlrCheckResponse[]> {\n    return await this.httpClient.get<\n      HlrCheckResponse | HlrCheckResponse[],\n      HlrCheckResponse | HlrCheckResponse[]\n    >('/hlr.do', {\n      params: {\n        format: 'json',\n        idx,\n        number: numbers.join(','),\n      },\n    });\n  }\n}\n","import { BaseModule } from '../baseModule';\n\nimport { ProfileResponse } from './types/ProfileResponse';\n\nexport class Profile extends BaseModule {\n  async get(): Promise<ProfileResponse> {\n    return await this.httpClient.get<ProfileResponse, ProfileResponse>(\n      '/profile'\n    );\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { Sendername } from './types/Sendername';\nimport { SendernameStatus } from './types/SendernameStatus';\n\ninterface ApiSendername {\n  createdAt: string;\n  isDefault: boolean;\n  sender: string;\n  status: SendernameStatus;\n}\n\nexport class Sendernames extends BaseModule {\n  async get(): Promise<ApiCollection<Sendername>> {\n    const data = await this.httpClient.get<\n      ApiCollection<ApiSendername>,\n      ApiCollection<ApiSendername>\n    >('/sms/sendernames');\n\n    return {\n      ...data,\n      collection: data.collection.map(this.formatSendernameDates),\n    };\n  }\n\n  async getBySender(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.get<ApiSendername, ApiSendername>(\n      `/sms/sendernames/${sender}`\n    );\n\n    return this.formatSendernameDates(data);\n  }\n\n  async create(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.post<ApiSendername, ApiSendername>(\n      '/sms/sendernames',\n      {\n        sender,\n      }\n    );\n\n    return this.formatSendernameDates(data);\n  }\n\n  async makeDefault(sender: string): Promise<void> {\n    await this.httpClient.post<void, void>(\n      `/sms/sendernames/${sender}/commands/make_default`\n    );\n  }\n\n  async remove(sender: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/sms/sendernames/${sender}`);\n  }\n\n  private formatSendernameDates(sendername: ApiSendername): Sendername {\n    return {\n      ...sendername,\n      createdAt: new Date(sendername.createdAt),\n    };\n  }\n}\n","import isArray from 'lodash/isArray';\nimport mapKeys from 'lodash/mapKeys';\nimport snakeCase from 'lodash/snakeCase';\n\nimport { BaseModule } from '../baseModule';\n\nimport { SmsDetails } from './types/SmsDetails';\nimport { SmsResponse } from './types/SmsResponse';\n\ninterface SmsApiDetails {\n  [key: string]: unknown;\n}\n\nexport class Sms extends BaseModule {\n  async sendSms(\n    numbers: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<SmsResponse> {\n    const to = isArray(numbers) ? numbers.join(',') : numbers;\n\n    return await this.send(message, to, undefined, details);\n  }\n\n  async sendFlashSms(\n    numbers: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<SmsResponse> {\n    return await this.sendSms(numbers, message, { ...details, flash: true });\n  }\n\n  async sendSmsToGroup(\n    groups: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<SmsResponse> {\n    const group = isArray(groups) ? groups.join(',') : groups;\n\n    return await this.send(message, undefined, group, details);\n  }\n\n  async sendFlashSmsToGroup(\n    groups: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<SmsResponse> {\n    return await this.sendSmsToGroup(groups, message, {\n      ...details,\n      flash: true,\n    });\n  }\n\n  private async send(\n    message: string,\n    to?: string,\n    group?: string,\n    details?: SmsDetails\n  ): Promise<SmsResponse> {\n    const body: Record<string, unknown> = {\n      message: message.trim(),\n      details: true,\n      encoding: 'utf-8',\n      format: 'json',\n      ...this.formatSmsDetails(details || {}),\n    };\n\n    if (to) {\n      body.to = to;\n    } else {\n      body.group = group;\n    }\n\n    const data = await this.httpClient.post<SmsResponse, SmsResponse>(\n      '/sms.do',\n      body\n    );\n\n    return this.formatSmsResponse(data);\n  }\n\n  private formatSmsDetails(details: SmsDetails): SmsApiDetails {\n    const formattedDetails = details as Record<string, unknown>;\n\n    if (details.date) {\n      formattedDetails.dateValidate = true;\n      formattedDetails.date = details.date.toISOString();\n    }\n\n    if (details.expirationDate) {\n      formattedDetails.expirationDate = details.expirationDate.toISOString();\n    }\n\n    return mapKeys(formattedDetails, (_, key) => {\n      if (/param[1-4]/.test(key)) {\n        return key;\n      }\n\n      if (key === 'noUnicode') {\n        return key.toLowerCase();\n      }\n\n      return snakeCase(key);\n    });\n  }\n\n  private formatSmsResponse(response: SmsResponse): SmsResponse {\n    return {\n      ...response,\n      list: response.list.map((sms) => ({\n        ...sms,\n        dateSent: new Date(sms.dateSent),\n      })),\n    };\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection, NewSubuser } from '../../types';\n\nimport { Subuser } from './types/Subuser';\nimport { UpdateSubuser } from './types/UpdateSubuser';\n\nexport interface ApiSubuser\n  extends Omit<Omit<Subuser, 'credentials'>, 'points'> {\n  credentials: {\n    username: string;\n    password: string;\n    api_password: string;\n  };\n  points: {\n    from_account: number;\n    per_month: number;\n  };\n}\n\nexport class Subusers extends BaseModule {\n  async get(): Promise<ApiCollection<Subuser>> {\n    return await this.httpClient.get<\n      ApiCollection<Subuser>,\n      ApiCollection<Subuser>\n    >('/subusers');\n  }\n\n  async getById(subuserId: string): Promise<Subuser> {\n    return await this.httpClient.get<Subuser, Subuser>(\n      `/subusers/${subuserId}`\n    );\n  }\n\n  async create(newSubuser: NewSubuser): Promise<Subuser> {\n    const { credentials, points } = newSubuser;\n\n    return await this.httpClient.post<Subuser, Subuser>('/subusers', {\n      ...newSubuser,\n      credentials: {\n        username: credentials.username,\n        password: credentials.password,\n        api_password: credentials.apiPassword,\n      },\n      points: points\n        ? {\n            from_account: points.fromAccount,\n            per_month: points.perMonth,\n          }\n        : undefined,\n    });\n  }\n\n  async update(\n    subuserId: string,\n    updateSubuser: Partial<UpdateSubuser>\n  ): Promise<Subuser> {\n    const { credentials, points } = updateSubuser;\n\n    return await this.httpClient.put<Subuser, Subuser>(\n      `/subusers/${subuserId}`,\n      {\n        ...updateSubuser,\n        credentials:\n          credentials && (credentials.password || credentials.apiPassword)\n            ? {\n                password: credentials.password,\n                api_password: credentials.apiPassword,\n              }\n            : undefined,\n        points:\n          points && (points.fromAccount || points.perMonth)\n            ? {\n                from_account: points.fromAccount,\n                per_month: points.perMonth,\n              }\n            : undefined,\n      }\n    );\n  }\n\n  async remove(subuserId: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/subusers/${subuserId}`);\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { NewTemplate } from './types/NewTemplate';\nimport { Template } from './types/Template';\n\nexport class Templates extends BaseModule {\n  async get(): Promise<ApiCollection<Template>> {\n    return await this.httpClient.get<\n      ApiCollection<Template>,\n      ApiCollection<Template>\n    >('/sms/templates');\n  }\n\n  async getById(templateId: string): Promise<Template> {\n    return await this.httpClient.get<Template, Template>(\n      `/sms/templates/${templateId}`\n    );\n  }\n\n  async create(newTemplate: NewTemplate): Promise<Template> {\n    return await this.httpClient.post<Template, Template>(\n      '/sms/templates',\n      newTemplate\n    );\n  }\n\n  async update(\n    templateId: string,\n    newTemplate: Partial<NewTemplate>\n  ): Promise<Template> {\n    return await this.httpClient.put<Template, Template>(\n      `/sms/templates/${templateId}`,\n      newTemplate\n    );\n  }\n\n  async remove(templateId: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/sms/templates/${templateId}`);\n  }\n}\n","import { AxiosResponse } from 'axios';\nimport camelCase from 'lodash/camelCase';\nimport forEach from 'lodash/forEach';\nimport isArray from 'lodash/isArray';\nimport isObject from 'lodash/isObject';\nimport mapKeys from 'lodash/mapKeys';\n\nconst formatKeys = (\n  object: Record<string, unknown>\n): Record<string, unknown> => {\n  return mapKeys(object, (_, key) => {\n    return camelCase(key);\n  });\n};\n\nconst formatResponse = (object: Record<string, unknown>) => {\n  const newResponse = formatKeys(object);\n\n  forEach(newResponse, (value, key) => {\n    if (isObject(value)) {\n      newResponse[key] = formatKeys(value as Record<string, unknown>);\n    }\n  });\n\n  return newResponse;\n};\n\nconst isApiCollection = (data: Record<string, unknown>): boolean => {\n  return !!data.collection && !!data.size;\n};\n\nconst isSmsResponse = (data: Record<string, unknown>): boolean => {\n  return !!data.list && !!data.message && !!data.count;\n};\n\nexport const extractDataFromResponse = (response: AxiosResponse) => {\n  const { data } = response;\n\n  if (!data) {\n    return data;\n  }\n\n  if (isArray(data)) {\n    return data.map(formatResponse);\n  }\n\n  if (isApiCollection(data)) {\n    return {\n      ...data,\n      collection: data.collection.map(formatResponse),\n    };\n  }\n\n  if (isSmsResponse(data)) {\n    return {\n      ...data,\n      list: data.list.map(formatResponse),\n    };\n  }\n\n  return formatResponse(data);\n};\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport axios, { AxiosInstance } from 'axios';\n// @ts-ignore TS7016\nimport adapter from 'axios/lib/adapters/http';\n\nimport { Hlr } from '../modules/hlr';\nimport { Profile } from '../modules/profile';\nimport { Sendernames } from '../modules/sendernames';\nimport { Sms } from '../modules/sms';\nimport { Subusers } from '../modules/subusers';\nimport { Templates } from '../modules/templates';\n// @ts-ignore TS6059\nimport { version } from '../../package.json';\n\nimport { extractDataFromResponse } from './httpClient/extractDataFromResponse';\n/* eslint-enable @typescript-eslint/ban-ts-comment */\n\nexport class SMSAPI {\n  private apiUrl: string;\n  private accessToken: string;\n\n  private httpClient: AxiosInstance;\n\n  public hlr: Hlr;\n  public profile: Profile;\n  public sendernames: Sendernames;\n  public subusers: Subusers;\n  public sms: Sms;\n  public templates: Templates;\n\n  constructor(accessToken: string, apiUrl: string) {\n    this.accessToken = accessToken;\n    this.apiUrl = apiUrl;\n\n    this.httpClient = this.setHttpClient();\n\n    this.hlr = new Hlr(this.httpClient);\n    this.profile = new Profile(this.httpClient);\n    this.sendernames = new Sendernames(this.httpClient);\n    this.sms = new Sms(this.httpClient);\n    this.subusers = new Subusers(this.httpClient);\n    this.templates = new Templates(this.httpClient);\n  }\n\n  private getUserAgent(): string {\n    return `smsapi/js-client:${version}`;\n  }\n\n  private setHttpClient(): AxiosInstance {\n    const httpClient = axios.create({\n      adapter,\n      baseURL: this.apiUrl,\n      headers: {\n        Accept: 'application/json',\n        Authorization: `Bearer ${this.accessToken}`,\n        'User-Agent': this.getUserAgent(),\n      },\n    });\n\n    httpClient.interceptors.response.use(extractDataFromResponse);\n\n    return httpClient;\n  }\n}\n","import { SMSAPI } from '.';\n\nexport class SMSAPIcom extends SMSAPI {\n  constructor(accessToken: string) {\n    const API_URL = 'https://api.smsapi.com';\n\n    super(accessToken, API_URL);\n  }\n}\n","import { SMSAPI } from '.';\n\nexport class SMSAPIpl extends SMSAPI {\n  constructor(accessToken: string) {\n    const API_URL = 'https://api.smsapi.pl';\n\n    super(accessToken, API_URL);\n  }\n}\n"],"names":["BaseModule","httpClient","Hlr","check","numbers","idx","this","get","params","format","number","join","Profile","Sendernames","_this2","data","collection","map","formatSendernameDates","getBySender","sender","_this4","create","_this6","post","makeDefault","remove","sendername","createdAt","Date","Sms","sendSms","message","details","to","isArray","send","undefined","sendFlashSms","flash","sendSmsToGroup","groups","group","sendFlashSmsToGroup","body","trim","encoding","_this10","formatSmsDetails","formatSmsResponse","formattedDetails","date","dateValidate","toISOString","expirationDate","mapKeys","_","key","test","toLowerCase","snakeCase","response","list","sms","dateSent","Subusers","getById","subuserId","newSubuser","credentials","points","username","password","api_password","apiPassword","from_account","fromAccount","per_month","perMonth","update","updateSubuser","put","Templates","templateId","newTemplate","formatKeys","object","camelCase","formatResponse","newResponse","forEach","value","isObject","extractDataFromResponse","size","isApiCollection","count","isSmsResponse","SMSAPI","accessToken","apiUrl","setHttpClient","hlr","profile","sendernames","subusers","templates","getUserAgent","axios","adapter","baseURL","headers","Accept","Authorization","interceptors","use","SMSAPIcom","_SMSAPI","SMSAPIpl"],"mappings":"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"}