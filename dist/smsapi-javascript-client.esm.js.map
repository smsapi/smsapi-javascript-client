{"version":3,"file":"smsapi-javascript-client.esm.js","sources":["../src/modules/baseModule/index.ts","../src/modules/hlr/index.ts","../src/modules/profile/index.ts","../src/modules/sendernames/index.ts","../src/modules/sms/index.ts","../src/modules/subusers/index.ts","../src/modules/templates/index.ts","../src/smsapi/httpClient/extractDataFromResponse/index.ts","../src/smsapi/index.ts","../src/smsapi/com.ts","../src/smsapi/pl.ts"],"sourcesContent":["import { AxiosInstance } from 'axios';\n\nexport class BaseModule {\n  protected httpClient: AxiosInstance;\n\n  constructor(httpClient: AxiosInstance) {\n    this.httpClient = httpClient;\n  }\n}\n","import { BaseModule } from '../baseModule';\n\nimport { HlrCheckResponse } from './types/HlrCheckResponse';\n\nexport class Hlr extends BaseModule {\n  async check(\n    numbers: string[],\n    idx?: string\n  ): Promise<HlrCheckResponse | HlrCheckResponse[]> {\n    return await this.httpClient.get<\n      HlrCheckResponse | HlrCheckResponse[],\n      HlrCheckResponse | HlrCheckResponse[]\n    >('/hlr.do', {\n      params: {\n        format: 'json',\n        idx,\n        number: numbers.join(','),\n      },\n    });\n  }\n}\n","import { BaseModule } from '../baseModule';\n\nimport { ProfileResponse } from './types/ProfileResponse';\n\nexport class Profile extends BaseModule {\n  async get(): Promise<ProfileResponse> {\n    return await this.httpClient.get<ProfileResponse, ProfileResponse>(\n      '/profile'\n    );\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { Sendername } from './types/Sendername';\nimport { SendernameStatus } from './types/SendernameStatus';\n\ninterface ApiSendername {\n  createdAt: string;\n  isDefault: boolean;\n  sender: string;\n  status: SendernameStatus;\n}\n\nexport class Sendernames extends BaseModule {\n  async get(): Promise<ApiCollection<Sendername>> {\n    const data = await this.httpClient.get<\n      ApiCollection<ApiSendername>,\n      ApiCollection<ApiSendername>\n    >('/sms/sendernames');\n\n    return {\n      ...data,\n      collection: data.collection.map(this.formatSendernameDates),\n    };\n  }\n\n  async getBySender(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.get<ApiSendername, ApiSendername>(\n      `/sms/sendernames/${sender}`\n    );\n\n    return this.formatSendernameDates(data);\n  }\n\n  async create(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.post<ApiSendername, ApiSendername>(\n      '/sms/sendernames',\n      {\n        sender,\n      }\n    );\n\n    return this.formatSendernameDates(data);\n  }\n\n  async makeDefault(sender: string): Promise<void> {\n    await this.httpClient.post<void, void>(\n      `/sms/sendernames/${sender}/commands/make_default`\n    );\n  }\n\n  async remove(sender: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/sms/sendernames/${sender}`);\n  }\n\n  private formatSendernameDates(sendername: ApiSendername): Sendername {\n    return {\n      ...sendername,\n      createdAt: new Date(sendername.createdAt),\n    };\n  }\n}\n","import isArray from 'lodash/isArray';\nimport mapKeys from 'lodash/mapKeys';\nimport snakeCase from 'lodash/snakeCase';\n\nimport { BaseModule } from '../baseModule';\n\nimport { ScheduledSmsResponse } from './types/ScheduledSmsResponse';\nimport { SmsDetails } from './types/SmsDetails';\nimport { SmsResponse } from './types/SmsResponse';\n\ninterface SmsApiDetails {\n  [key: string]: unknown;\n}\n\nexport class Sms extends BaseModule {\n  async sendSms(\n    numbers: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<SmsResponse> {\n    const to = isArray(numbers) ? numbers.join(',') : numbers;\n\n    return await this.send(message, to, undefined, details);\n  }\n\n  async sendFlashSms(\n    numbers: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<SmsResponse> {\n    return await this.sendSms(numbers, message, { ...details, flash: true });\n  }\n\n  async sendSmsToGroup(\n    groups: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<SmsResponse> {\n    const group = isArray(groups) ? groups.join(',') : groups;\n\n    return await this.send(message, undefined, group, details);\n  }\n\n  async sendFlashSmsToGroup(\n    groups: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<SmsResponse> {\n    return await this.sendSmsToGroup(groups, message, {\n      ...details,\n      flash: true,\n    });\n  }\n\n  async removeScheduledSms(\n    smsId: string | string[]\n  ): Promise<ScheduledSmsResponse> {\n    const ids = isArray(smsId) ? smsId.join(',') : smsId;\n\n    return await this.httpClient.post<\n      ScheduledSmsResponse,\n      ScheduledSmsResponse\n    >('/sms.do', {\n      format: 'json',\n      sch_del: ids,\n    });\n  }\n\n  private async send(\n    message: string,\n    to?: string,\n    group?: string,\n    details?: SmsDetails\n  ): Promise<SmsResponse> {\n    const body: Record<string, unknown> = {\n      message: message.trim(),\n      details: true,\n      encoding: 'utf-8',\n      format: 'json',\n      ...this.formatSmsDetails(details || {}),\n    };\n\n    if (to) {\n      body.to = to;\n    } else {\n      body.group = group;\n    }\n\n    const data = await this.httpClient.post<SmsResponse, SmsResponse>(\n      '/sms.do',\n      body\n    );\n\n    return this.formatSmsResponse(data);\n  }\n\n  private formatSmsDetails(details: SmsDetails): SmsApiDetails {\n    const formattedDetails = details as Record<string, unknown>;\n\n    if (details.date) {\n      formattedDetails.dateValidate = true;\n      formattedDetails.date = details.date.toISOString();\n    }\n\n    if (details.expirationDate) {\n      formattedDetails.expirationDate = details.expirationDate.toISOString();\n    }\n\n    return mapKeys(formattedDetails, (_, key) => {\n      if (/param[1-4]/.test(key)) {\n        return key;\n      }\n\n      if (key === 'noUnicode') {\n        return key.toLowerCase();\n      }\n\n      return snakeCase(key);\n    });\n  }\n\n  private formatSmsResponse(response: SmsResponse): SmsResponse {\n    return {\n      ...response,\n      list: response.list.map((sms) => ({\n        ...sms,\n        dateSent: new Date(sms.dateSent),\n      })),\n    };\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection, NewSubuser } from '../../types';\n\nimport { Subuser } from './types/Subuser';\nimport { UpdateSubuser } from './types/UpdateSubuser';\n\nexport interface ApiSubuser\n  extends Omit<Omit<Subuser, 'credentials'>, 'points'> {\n  credentials: {\n    username: string;\n    password: string;\n    api_password: string;\n  };\n  points: {\n    from_account: number;\n    per_month: number;\n  };\n}\n\nexport class Subusers extends BaseModule {\n  async get(): Promise<ApiCollection<Subuser>> {\n    return await this.httpClient.get<\n      ApiCollection<Subuser>,\n      ApiCollection<Subuser>\n    >('/subusers');\n  }\n\n  async getById(subuserId: string): Promise<Subuser> {\n    return await this.httpClient.get<Subuser, Subuser>(\n      `/subusers/${subuserId}`\n    );\n  }\n\n  async create(newSubuser: NewSubuser): Promise<Subuser> {\n    const { credentials, points } = newSubuser;\n\n    return await this.httpClient.post<Subuser, Subuser>('/subusers', {\n      ...newSubuser,\n      credentials: {\n        username: credentials.username,\n        password: credentials.password,\n        api_password: credentials.apiPassword,\n      },\n      points: points\n        ? {\n            from_account: points.fromAccount,\n            per_month: points.perMonth,\n          }\n        : undefined,\n    });\n  }\n\n  async update(\n    subuserId: string,\n    updateSubuser: Partial<UpdateSubuser>\n  ): Promise<Subuser> {\n    const { credentials, points } = updateSubuser;\n\n    return await this.httpClient.put<Subuser, Subuser>(\n      `/subusers/${subuserId}`,\n      {\n        ...updateSubuser,\n        credentials:\n          credentials && (credentials.password || credentials.apiPassword)\n            ? {\n                password: credentials.password,\n                api_password: credentials.apiPassword,\n              }\n            : undefined,\n        points:\n          points && (points.fromAccount || points.perMonth)\n            ? {\n                from_account: points.fromAccount,\n                per_month: points.perMonth,\n              }\n            : undefined,\n      }\n    );\n  }\n\n  async remove(subuserId: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/subusers/${subuserId}`);\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { NewTemplate } from './types/NewTemplate';\nimport { Template } from './types/Template';\n\nexport class Templates extends BaseModule {\n  async get(): Promise<ApiCollection<Template>> {\n    return await this.httpClient.get<\n      ApiCollection<Template>,\n      ApiCollection<Template>\n    >('/sms/templates');\n  }\n\n  async getById(templateId: string): Promise<Template> {\n    return await this.httpClient.get<Template, Template>(\n      `/sms/templates/${templateId}`\n    );\n  }\n\n  async create(newTemplate: NewTemplate): Promise<Template> {\n    return await this.httpClient.post<Template, Template>(\n      '/sms/templates',\n      newTemplate\n    );\n  }\n\n  async update(\n    templateId: string,\n    newTemplate: Partial<NewTemplate>\n  ): Promise<Template> {\n    return await this.httpClient.put<Template, Template>(\n      `/sms/templates/${templateId}`,\n      newTemplate\n    );\n  }\n\n  async remove(templateId: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/sms/templates/${templateId}`);\n  }\n}\n","import { AxiosResponse } from 'axios';\nimport camelCase from 'lodash/camelCase';\nimport forEach from 'lodash/forEach';\nimport isArray from 'lodash/isArray';\nimport isObject from 'lodash/isObject';\nimport mapKeys from 'lodash/mapKeys';\n\nconst formatKeys = (\n  object: Record<string, unknown>\n): Record<string, unknown> => {\n  return mapKeys(object, (_, key) => {\n    return camelCase(key);\n  });\n};\n\nconst formatResponse = (object: Record<string, unknown>) => {\n  const newResponse = formatKeys(object);\n\n  forEach(newResponse, (value, key) => {\n    if (isObject(value)) {\n      newResponse[key] = formatKeys(value as Record<string, unknown>);\n    }\n  });\n\n  return newResponse;\n};\n\nconst isApiCollection = (data: Record<string, unknown>): boolean => {\n  return !!data.collection && !!data.size;\n};\n\nconst isSmsResponse = (data: Record<string, unknown>): boolean => {\n  return !!data.list && !!data.count;\n};\n\nexport const extractDataFromResponse = (response: AxiosResponse) => {\n  const { data } = response;\n\n  if (!data) {\n    return data;\n  }\n\n  if (isArray(data)) {\n    return data.map(formatResponse);\n  }\n\n  if (isApiCollection(data)) {\n    return {\n      ...data,\n      collection: data.collection.map(formatResponse),\n    };\n  }\n\n  if (isSmsResponse(data)) {\n    return {\n      ...data,\n      list: data.list.map(formatResponse),\n    };\n  }\n\n  return formatResponse(data);\n};\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport axios, { AxiosInstance } from 'axios';\n// @ts-ignore TS7016\nimport adapter from 'axios/lib/adapters/http';\n\nimport { Hlr } from '../modules/hlr';\nimport { Profile } from '../modules/profile';\nimport { Sendernames } from '../modules/sendernames';\nimport { Sms } from '../modules/sms';\nimport { Subusers } from '../modules/subusers';\nimport { Templates } from '../modules/templates';\n// @ts-ignore TS6059\nimport { version } from '../../package.json';\n\nimport { extractDataFromResponse } from './httpClient/extractDataFromResponse';\n/* eslint-enable @typescript-eslint/ban-ts-comment */\n\nexport class SMSAPI {\n  private apiUrl: string;\n  private accessToken: string;\n\n  private httpClient: AxiosInstance;\n\n  public hlr: Hlr;\n  public profile: Profile;\n  public sendernames: Sendernames;\n  public subusers: Subusers;\n  public sms: Sms;\n  public templates: Templates;\n\n  constructor(accessToken: string, apiUrl: string) {\n    this.accessToken = accessToken;\n    this.apiUrl = apiUrl;\n\n    this.httpClient = this.setHttpClient();\n\n    this.hlr = new Hlr(this.httpClient);\n    this.profile = new Profile(this.httpClient);\n    this.sendernames = new Sendernames(this.httpClient);\n    this.sms = new Sms(this.httpClient);\n    this.subusers = new Subusers(this.httpClient);\n    this.templates = new Templates(this.httpClient);\n  }\n\n  private getUserAgent(): string {\n    return `smsapi/js-client:${version}`;\n  }\n\n  private setHttpClient(): AxiosInstance {\n    const httpClient = axios.create({\n      adapter,\n      baseURL: this.apiUrl,\n      headers: {\n        Accept: 'application/json',\n        Authorization: `Bearer ${this.accessToken}`,\n        'User-Agent': this.getUserAgent(),\n      },\n    });\n\n    httpClient.interceptors.response.use(extractDataFromResponse);\n\n    return httpClient;\n  }\n}\n","import { SMSAPI } from '.';\n\nexport class SMSAPIcom extends SMSAPI {\n  constructor(accessToken: string) {\n    const API_URL = 'https://api.smsapi.com';\n\n    super(accessToken, API_URL);\n  }\n}\n","import { SMSAPI } from '.';\n\nexport class SMSAPIpl extends SMSAPI {\n  constructor(accessToken: string) {\n    const API_URL = 'https://api.smsapi.pl';\n\n    super(accessToken, API_URL);\n  }\n}\n"],"names":["BaseModule","httpClient","Hlr","check","numbers","idx","get","params","format","number","join","Profile","Sendernames","data","collection","map","formatSendernameDates","getBySender","sender","create","post","makeDefault","remove","sendername","createdAt","Date","Sms","sendSms","message","details","to","isArray","send","undefined","sendFlashSms","flash","sendSmsToGroup","groups","group","sendFlashSmsToGroup","removeScheduledSms","smsId","ids","sch_del","body","trim","encoding","formatSmsDetails","formatSmsResponse","formattedDetails","date","dateValidate","toISOString","expirationDate","mapKeys","_","key","test","toLowerCase","snakeCase","response","list","sms","dateSent","Subusers","getById","subuserId","newSubuser","credentials","points","username","password","api_password","apiPassword","from_account","fromAccount","per_month","perMonth","update","updateSubuser","put","Templates","templateId","newTemplate","formatKeys","object","camelCase","formatResponse","newResponse","forEach","value","isObject","isApiCollection","size","isSmsResponse","count","extractDataFromResponse","SMSAPI","accessToken","apiUrl","setHttpClient","hlr","profile","sendernames","subusers","templates","getUserAgent","version","axios","adapter","baseURL","headers","Accept","Authorization","interceptors","use","SMSAPIcom","API_URL","SMSAPIpl"],"mappings":"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"}