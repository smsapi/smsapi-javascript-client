{"version":3,"file":"smsapi-javascript-client.esm.js","sources":["../src/smsapi/httpClient/extractDataFromResponse/index.ts","../src/modules/baseModule/index.ts","../src/modules/contacts/helpers/formatDate/index.ts","../src/modules/contacts/httpClient/prepareParamsForRequest/index.ts","../src/modules/contacts/modules/groups/index.ts","../src/modules/contacts/httpClient/formatResponseDates/index.ts","../src/modules/contacts/modules/fields/index.ts","../src/modules/contacts/index.ts","../src/modules/hlr/index.ts","../src/modules/baseMessageModule/index.ts","../src/modules/mms/index.ts","../src/modules/profile/index.ts","../src/modules/sendernames/index.ts","../src/modules/sms/index.ts","../src/modules/subusers/index.ts","../src/modules/templates/index.ts","../src/modules/vms/index.ts","../src/constants/index.ts","../src/smsapi/index.ts"],"sourcesContent":["import { AxiosResponse } from 'axios';\nimport camelCase from 'lodash/camelCase';\nimport forEach from 'lodash/forEach';\nimport isArray from 'lodash/isArray';\nimport isDate from 'lodash/isDate';\nimport isObject from 'lodash/isObject';\nimport mapKeys from 'lodash/mapKeys';\n\nconst formatKeys = (\n  object: Record<string, unknown>\n): Record<string, unknown> => {\n  return mapKeys(object, (_, key) => {\n    return camelCase(key);\n  });\n};\n\nconst formatResponse = (object: Record<string, unknown>) => {\n  const newResponse = formatKeys(object);\n\n  forEach(newResponse, (value, key) => {\n    if (isDate(value)) {\n      return;\n    }\n\n    if (isArray(value)) {\n      newResponse[key] = value.map((arrayValue) =>\n        isObject(arrayValue) && !isDate(arrayValue)\n          ? formatKeys(arrayValue as Record<string, unknown>)\n          : arrayValue\n      );\n\n      return;\n    }\n\n    if (isObject(value)) {\n      newResponse[key] = formatKeys(value as Record<string, unknown>);\n    }\n  });\n\n  return newResponse;\n};\n\nconst isApiCollection = (data: Record<string, unknown>): boolean => {\n  return !!data.collection && !!data.size;\n};\n\nconst isSmsResponse = (data: Record<string, unknown>): boolean => {\n  return !!data.list && !!data.count;\n};\n\nexport const extractDataFromResponse = (response: AxiosResponse) => {\n  const { data } = response;\n\n  if (!data) {\n    return data;\n  }\n\n  if (isArray(data)) {\n    return data.map(formatResponse);\n  }\n\n  if (isApiCollection(data)) {\n    return {\n      ...data,\n      collection: data.collection.map(formatResponse),\n    };\n  }\n\n  if (isSmsResponse(data)) {\n    return {\n      ...data,\n      list: data.list.map(formatResponse),\n    };\n  }\n\n  return formatResponse(data);\n};\n","import { AxiosInstance } from 'axios';\n\nexport class BaseModule {\n  protected httpClient: AxiosInstance;\n\n  constructor(httpClient: AxiosInstance) {\n    this.httpClient = httpClient;\n  }\n}\n","export const formatDate = (date: Date): string => {\n  return date.toISOString().slice(0, 10);\n};\n","import { stringify } from 'querystring';\n\nimport { AxiosRequestConfig } from 'axios';\nimport isArray from 'lodash/isArray';\nimport mapKeys from 'lodash/mapKeys';\nimport mapValues from 'lodash/mapValues';\nimport snakeCase from 'lodash/snakeCase';\n\nimport { formatDate } from '../../helpers/formatDate';\n\nconst formatKeys = (data: Record<string, string | boolean | number>) => {\n  return mapKeys(data, (_, key) => {\n    return snakeCase(key);\n  });\n};\n\nexport const prepareParamsForRequest = (\n  config: AxiosRequestConfig\n): AxiosRequestConfig => {\n  const { data, method, params } = config;\n\n  if (['get', 'delete'].includes((method as string).toLowerCase())) {\n    let formattedParams = mapValues(params, (value, key) => {\n      if (key === 'birthdayDate') {\n        if (isArray(value)) {\n          return value.map(formatDate);\n        }\n\n        return formatDate(value);\n      }\n\n      return value;\n    });\n\n    formattedParams = formatKeys(formattedParams);\n\n    return {\n      ...config,\n      params: formattedParams,\n      paramsSerializer: (params) => stringify(params),\n    };\n  }\n\n  if (data) {\n    return {\n      ...config,\n      data: stringify(formatKeys(data)),\n    };\n  }\n\n  return config;\n};\n","import { BaseModule } from '../../../baseModule';\nimport { ApiCollection } from '../../../../types/ApiCollection';\n\nimport { CreateGroupDetails } from './types/CreateGroupDetails';\nimport { Group } from './types/Group';\nimport { UpdateGroup } from './types/UpdateGroup';\n\nexport class Groups extends BaseModule {\n  async get(): Promise<ApiCollection<Group>> {\n    return await this.httpClient.get<\n      ApiCollection<Group>,\n      ApiCollection<Group>\n    >('/contacts/groups');\n  }\n\n  async getById(groupId: string): Promise<Group> {\n    return await this.httpClient.get<Group, Group>(\n      `/contacts/groups/${groupId}`\n    );\n  }\n\n  async create(name: string, details?: CreateGroupDetails): Promise<Group> {\n    return await this.httpClient.post<Group, Group>('/contacts/groups', {\n      name,\n      ...details,\n    });\n  }\n\n  async update(groupId: string, updateGroup: UpdateGroup): Promise<Group> {\n    return await this.httpClient.put<Group, Group>(\n      `/contacts/groups/${groupId}`,\n      updateGroup\n    );\n  }\n\n  async remove(groupId: string, deleteContacts = false): Promise<void> {\n    await this.httpClient.delete(`/contacts/groups/${groupId}`, {\n      params: {\n        deleteContacts,\n      },\n    });\n  }\n}\n","import { AxiosResponse } from 'axios';\n\nimport { ApiCollection } from '../../../../types/ApiCollection';\n\ninterface ApiGroup {\n  date_created: string;\n  date_updated: string;\n}\n\nconst isApiCollection = (\n  data: ApiGroup | ApiCollection<ApiGroup>\n): data is ApiCollection<ApiGroup> => {\n  return (\n    !!(data as ApiCollection<ApiGroup>).size &&\n    !!(data as ApiCollection<ApiGroup>).collection\n  );\n};\n\nconst formatDates = (group: ApiGroup): Record<string, Date | string> => {\n  if (!group.date_created && !group.date_updated) {\n    return {\n      ...group,\n    };\n  }\n\n  return {\n    ...group,\n    date_created: new Date(group.date_created),\n    date_updated: new Date(group.date_updated),\n  };\n};\n\nexport const formatResponseDates = (response: AxiosResponse): AxiosResponse => {\n  const { data } = response;\n\n  if (isApiCollection(data)) {\n    return {\n      ...response,\n      data: {\n        collection: data.collection.map((group) => formatDates(group)),\n        size: data.size,\n      },\n    };\n  }\n\n  return {\n    ...response,\n    data: formatDates(data),\n  };\n};\n","import { BaseModule } from '../../../baseModule';\nimport { ApiCollection } from '../../../../types/ApiCollection';\n\nimport { Field } from './types/Field';\nimport { FieldType } from './types/FieldType';\n\nexport class Fields extends BaseModule {\n  async get(): Promise<ApiCollection<Field>> {\n    return await this.httpClient.get<\n      ApiCollection<Field>,\n      ApiCollection<Field>\n    >('/contacts/fields');\n  }\n\n  async create(\n    fieldName: string,\n    fieldType: FieldType = 'text'\n  ): Promise<Field> {\n    return await this.httpClient.post<Field, Field>('/contacts/fields', {\n      name: fieldName,\n      type: fieldType,\n    });\n  }\n\n  async update(fieldId: string, newName: string): Promise<Field> {\n    return await this.httpClient.put<Field, Field>(\n      `/contacts/fields/${fieldId}`,\n      {\n        name: newName,\n      }\n    );\n  }\n\n  async remove(fieldId: string): Promise<void> {\n    await this.httpClient.delete(`/contacts/fields/${fieldId}`);\n  }\n}\n","import axios, { AxiosInstance } from 'axios';\nimport mapKeys from 'lodash/mapKeys';\nimport snakeCase from 'lodash/snakeCase';\n\nimport { extractDataFromResponse } from '../../smsapi/httpClient/extractDataFromResponse';\nimport { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types/ApiCollection';\n\nimport { Contact } from './types/Contact';\nimport { NewContact } from './types/NewContact';\nimport { GetContactsQueryParams } from './types/GetContactsQueryParams';\nimport { formatDate } from './helpers/formatDate';\nimport { prepareParamsForRequest } from './httpClient/prepareParamsForRequest';\nimport { Groups } from './modules/groups';\nimport { Group } from './modules/groups/types/Group';\nimport { formatResponseDates } from './httpClient/formatResponseDates';\nimport { UpdateContact } from './types/UpdateContact';\nimport { Fields } from './modules/fields';\n\nexport class Contacts extends BaseModule {\n  private contactHttpClient: AxiosInstance;\n\n  public fields: Fields;\n  public groups: Groups;\n\n  constructor(httpClient: AxiosInstance) {\n    super(httpClient);\n\n    this.contactHttpClient = axios.create({\n      adapter: httpClient.defaults.adapter,\n      baseURL: httpClient.defaults.baseURL,\n      headers: httpClient.defaults.headers,\n    });\n\n    this.contactHttpClient.interceptors.request.use(prepareParamsForRequest);\n    this.contactHttpClient.interceptors.response.use(formatResponseDates);\n    this.contactHttpClient.interceptors.response.use(extractDataFromResponse);\n\n    this.fields = new Fields(this.contactHttpClient);\n    this.groups = new Groups(this.contactHttpClient);\n  }\n\n  async get(params?: GetContactsQueryParams): Promise<ApiCollection<Contact>> {\n    return await this.contactHttpClient.get<\n      ApiCollection<Contact>,\n      ApiCollection<Contact>\n    >('/contacts', {\n      params,\n    });\n  }\n\n  async getById(contactId: string): Promise<Contact> {\n    return await this.contactHttpClient.get<Contact, Contact>(\n      `/contacts/${contactId}`\n    );\n  }\n\n  async create(phoneNumber: string, details?: NewContact): Promise<Contact> {\n    return await this.contactHttpClient.post<Contact, Contact>('/contacts', {\n      phone_number: phoneNumber,\n      ...this.formatContactDetails(details || {}),\n    });\n  }\n\n  async update(\n    contactId: string,\n    updateContact: UpdateContact\n  ): Promise<Contact> {\n    return await this.contactHttpClient.put<Contact, Contact>(\n      `/contacts/${contactId}`,\n      {\n        ...this.formatContactDetails(updateContact || {}),\n      }\n    );\n  }\n\n  async remove(contactId: string): Promise<void> {\n    await this.contactHttpClient.delete(`/contacts/${contactId}`);\n  }\n\n  async getGroups(contactId: string): Promise<ApiCollection<Group>> {\n    return await this.contactHttpClient.get<\n      ApiCollection<Group>,\n      ApiCollection<Group>\n    >(`/contacts/${contactId}/groups`);\n  }\n\n  async getGroupById(contactId: string, groupId: string): Promise<Group> {\n    return await this.contactHttpClient.get<Group, Group>(\n      `/contacts/${contactId}/groups/${groupId}`\n    );\n  }\n\n  async assignContactToGroup(\n    contactId: string,\n    groupId: string\n  ): Promise<ApiCollection<Group>> {\n    return await this.contactHttpClient.put<\n      ApiCollection<Group>,\n      ApiCollection<Group>\n    >(`/contacts/${contactId}/groups/${groupId}`);\n  }\n\n  async unpinContactFromGroup(\n    contactId: string,\n    groupId: string\n  ): Promise<void> {\n    await this.contactHttpClient.delete(\n      `/contacts/${contactId}/groups/${groupId}`\n    );\n  }\n\n  private formatContactDetails(details: NewContact): Record<string, unknown> {\n    const formattedDetails = details as Record<string, unknown>;\n\n    if (details.birthdayDate) {\n      formattedDetails.birthdayDate = formatDate(details.birthdayDate);\n    }\n\n    return mapKeys(formattedDetails, (_, key) => {\n      return snakeCase(key);\n    });\n  }\n}\n","import isArray from 'lodash/isArray';\n\nimport { BaseModule } from '../baseModule';\n\nimport { HlrCheckResponse } from './types/HlrCheckResponse';\n\nexport class Hlr extends BaseModule {\n  async check(\n    numbers: string | string[],\n    idx?: string | string[]\n  ): Promise<HlrCheckResponse | HlrCheckResponse[]> {\n    const params: Record<string, unknown> = {\n      number: isArray(numbers) ? numbers.join(',') : numbers,\n    };\n\n    if (idx) {\n      params.idx = isArray(idx) ? idx.join(',') : idx;\n    }\n\n    return await this.httpClient.get<\n      HlrCheckResponse | HlrCheckResponse[],\n      HlrCheckResponse | HlrCheckResponse[]\n    >('/hlr.do', {\n      params: {\n        format: 'json',\n        ...params,\n      },\n    });\n  }\n}\n","import fs from 'fs';\n\nimport FormData from 'form-data';\nimport isArray from 'lodash/isArray';\nimport mapKeys from 'lodash/mapKeys';\nimport snakeCase from 'lodash/snakeCase';\n\nimport { BaseModule } from '../baseModule';\nimport { SmsDetails } from '../sms/types/SmsDetails';\nimport { MessageResponse } from '../../types/MessageResponse';\n\nimport {\n  MessageContent,\n  SmsContent,\n  MmsContent,\n  VmsTextContent,\n  VmsLocalFileContent,\n  VmsRemoteFileContent,\n} from './types/MessageContent';\n\ninterface SmsApiDetails {\n  [key: string]: unknown;\n}\n\ninterface NumberRecipient {\n  to: string | string[];\n}\n\ninterface GroupRecipient {\n  group: string | string[];\n}\n\ntype Recipient = NumberRecipient | GroupRecipient;\n\nexport class BaseMessageModule extends BaseModule {\n  protected endpoint: string;\n\n  protected async send(\n    content: MessageContent,\n    recipient: Recipient,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    const body: Record<string, unknown> = {\n      details: true,\n      encoding: 'utf-8',\n      format: 'json',\n      ...this.formatSmsDetails(details || {}),\n    };\n\n    if (this.isNumberRecipient(recipient)) {\n      const { to } = recipient;\n\n      body.to = isArray(to) ? to.join(',') : to;\n    }\n\n    if (this.isGroupRecipient(recipient)) {\n      const { group } = recipient;\n\n      body.group = isArray(group) ? group.join(',') : group;\n    }\n\n    if (this.isSms(content)) {\n      body.message = content.message.trim();\n    }\n\n    if (this.isMms(content)) {\n      body.subject = content.subject.trim();\n      body.smil = content.smil;\n    }\n\n    if (this.isVmsText(content)) {\n      body.tts = content.tts.trim();\n      body.tts_lector = content.ttsLector || 'ewa';\n    }\n\n    if (this.isVmsRemotePath(content)) {\n      body.file = content.remotePath;\n    }\n\n    if (this.isVmsLocalFile(content)) {\n      const formData = this.getFormDataForVmsLocalFile(body, content);\n\n      const data = await this.httpClient.post<MessageResponse, MessageResponse>(\n        this.endpoint,\n        formData.getBuffer(),\n        {\n          headers: formData.getHeaders(),\n        }\n      );\n\n      return this.formatSmsResponse(data);\n    }\n\n    const data = await this.httpClient.post<MessageResponse, MessageResponse>(\n      this.endpoint,\n      body\n    );\n\n    return this.formatSmsResponse(data);\n  }\n\n  private isNumberRecipient(\n    recipient: Recipient\n  ): recipient is NumberRecipient {\n    return (recipient as NumberRecipient).to !== undefined;\n  }\n\n  private isGroupRecipient(recipient: Recipient): recipient is GroupRecipient {\n    return (recipient as GroupRecipient).group !== undefined;\n  }\n\n  private isSms(content: MessageContent): content is SmsContent {\n    return (content as SmsContent).message !== undefined;\n  }\n\n  private isMms(content: MessageContent): content is MmsContent {\n    return (\n      (content as MmsContent).smil !== undefined &&\n      (content as MmsContent).subject !== undefined\n    );\n  }\n\n  private isVmsText(content: MessageContent): content is VmsTextContent {\n    return (content as VmsTextContent).tts !== undefined;\n  }\n\n  private isVmsLocalFile(\n    content: MessageContent\n  ): content is VmsLocalFileContent {\n    return (content as VmsLocalFileContent).localPath !== undefined;\n  }\n\n  private isVmsRemotePath(\n    content: MessageContent\n  ): content is VmsRemoteFileContent {\n    return (content as VmsRemoteFileContent).remotePath !== undefined;\n  }\n\n  private getFormDataForVmsLocalFile(\n    body: Record<string, unknown>,\n    content: VmsLocalFileContent\n  ): FormData {\n    const formData = new FormData();\n\n    if (body.to) {\n      formData.append('to', body.to);\n    }\n\n    if (body.group) {\n      formData.append('group', body.group);\n    }\n\n    for (const [key, value] of Object.entries(body)) {\n      if (typeof value === 'boolean') {\n        formData.append(key, value ? 1 : 0);\n        continue;\n      }\n\n      formData.append(key, value as string);\n    }\n\n    formData.append('file', fs.readFileSync(content.localPath), {\n      contentType: 'audio/wav',\n      filename: 'vms.wav',\n    });\n\n    return formData;\n  }\n\n  private formatSmsDetails(details: SmsDetails): SmsApiDetails {\n    const formattedDetails = details as Record<string, unknown>;\n\n    if (details.date) {\n      formattedDetails.dateValidate = true;\n      formattedDetails.date = details.date.toISOString();\n    }\n\n    if (details.expirationDate) {\n      formattedDetails.expirationDate = details.expirationDate.toISOString();\n    }\n\n    return mapKeys(formattedDetails, (_, key) => {\n      if (/param[1-4]/.test(key)) {\n        return key;\n      }\n\n      if (key === 'noUnicode') {\n        return key.toLowerCase();\n      }\n\n      return snakeCase(key);\n    });\n  }\n\n  protected formatSmsResponse(response: MessageResponse): MessageResponse {\n    return {\n      ...response,\n      list: response.list.map((sms) => ({\n        ...sms,\n        dateSent: new Date(sms.dateSent),\n        points:\n          typeof sms.points === 'string' ? parseFloat(sms.points) : sms.points,\n      })),\n    };\n  }\n}\n","import { BaseMessageModule } from '../baseMessageModule';\nimport { MessageResponse } from '../../types/MessageResponse';\n\nimport { MmsDetails } from './types/MmsDetails';\n\nexport class Mms extends BaseMessageModule {\n  endpoint = '/mms.do';\n\n  async sendMms(\n    numbers: string | string[],\n    subject: string,\n    smil: string,\n    details?: MmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        smil,\n        subject,\n      },\n      {\n        to: numbers,\n      },\n      details\n    );\n  }\n\n  async sendMmsToGroup(\n    groups: string | string[],\n    subject: string,\n    smil: string,\n    details?: MmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        smil,\n        subject,\n      },\n      {\n        group: groups,\n      },\n      details\n    );\n  }\n}\n","import { BaseModule } from '../baseModule';\n\nimport { ProfileResponse } from './types/ProfileResponse';\n\nexport class Profile extends BaseModule {\n  async get(): Promise<ProfileResponse> {\n    return await this.httpClient.get<ProfileResponse, ProfileResponse>(\n      '/profile'\n    );\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { Sendername } from './types/Sendername';\nimport { SendernameStatus } from './types/SendernameStatus';\n\ninterface ApiSendername {\n  createdAt: string;\n  isDefault: boolean;\n  sender: string;\n  status: SendernameStatus;\n}\n\nexport class Sendernames extends BaseModule {\n  async get(): Promise<ApiCollection<Sendername>> {\n    const data = await this.httpClient.get<\n      ApiCollection<ApiSendername>,\n      ApiCollection<ApiSendername>\n    >('/sms/sendernames');\n\n    return {\n      ...data,\n      collection: data.collection.map(this.formatSendernameDates),\n    };\n  }\n\n  async getBySender(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.get<ApiSendername, ApiSendername>(\n      `/sms/sendernames/${sender}`\n    );\n\n    return this.formatSendernameDates(data);\n  }\n\n  async create(sender: string): Promise<Sendername> {\n    const data = await this.httpClient.post<ApiSendername, ApiSendername>(\n      '/sms/sendernames',\n      {\n        sender,\n      }\n    );\n\n    return this.formatSendernameDates(data);\n  }\n\n  async makeDefault(sender: string): Promise<void> {\n    await this.httpClient.post<void, void>(\n      `/sms/sendernames/${sender}/commands/make_default`\n    );\n  }\n\n  async remove(sender: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/sms/sendernames/${sender}`);\n  }\n\n  private formatSendernameDates(sendername: ApiSendername): Sendername {\n    return {\n      ...sendername,\n      createdAt: new Date(sendername.createdAt),\n    };\n  }\n}\n","import isArray from 'lodash/isArray';\n\nimport { BaseMessageModule } from '../baseMessageModule';\nimport { MessageResponse } from '../../types/MessageResponse';\n\nimport { ScheduledSmsResponse } from './types/ScheduledSmsResponse';\nimport { SmsDetails } from './types/SmsDetails';\n\nexport class Sms extends BaseMessageModule {\n  endpoint = '/sms.do';\n\n  async sendSms(\n    numbers: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        message,\n      },\n      {\n        to: numbers,\n      },\n      details\n    );\n  }\n\n  async sendFlashSms(\n    numbers: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.sendSms(numbers, message, { ...details, flash: true });\n  }\n\n  async sendSmsToGroup(\n    groups: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        message,\n      },\n      {\n        group: groups,\n      },\n      details\n    );\n  }\n\n  async sendFlashSmsToGroup(\n    groups: string | string[],\n    message: string,\n    details?: SmsDetails\n  ): Promise<MessageResponse> {\n    return await this.sendSmsToGroup(groups, message, {\n      ...details,\n      flash: true,\n    });\n  }\n\n  async removeScheduledSms(\n    smsId: string | string[]\n  ): Promise<ScheduledSmsResponse> {\n    const ids = isArray(smsId) ? smsId.join(',') : smsId;\n\n    return await this.httpClient.post<\n      ScheduledSmsResponse,\n      ScheduledSmsResponse\n    >(this.endpoint, {\n      format: 'json',\n      sch_del: ids,\n    });\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection, NewSubuser } from '../../types';\n\nimport { Subuser } from './types/Subuser';\nimport { UpdateSubuser } from './types/UpdateSubuser';\n\nexport interface ApiSubuser\n  extends Omit<Omit<Subuser, 'credentials'>, 'points'> {\n  credentials: {\n    username: string;\n    password: string;\n    api_password: string;\n  };\n  points: {\n    from_account: number;\n    per_month: number;\n  };\n}\n\nexport class Subusers extends BaseModule {\n  async get(): Promise<ApiCollection<Subuser>> {\n    return await this.httpClient.get<\n      ApiCollection<Subuser>,\n      ApiCollection<Subuser>\n    >('/subusers');\n  }\n\n  async getById(subuserId: string): Promise<Subuser> {\n    return await this.httpClient.get<Subuser, Subuser>(\n      `/subusers/${subuserId}`\n    );\n  }\n\n  async create(newSubuser: NewSubuser): Promise<Subuser> {\n    const { credentials, points } = newSubuser;\n\n    return await this.httpClient.post<Subuser, Subuser>('/subusers', {\n      ...newSubuser,\n      credentials: {\n        api_password: credentials.apiPassword,\n        password: credentials.password,\n        username: credentials.username,\n      },\n      points: points\n        ? {\n            from_account: points.fromAccount,\n            per_month: points.perMonth,\n          }\n        : undefined,\n    });\n  }\n\n  async update(\n    subuserId: string,\n    updateSubuser: Partial<UpdateSubuser>\n  ): Promise<Subuser> {\n    const { credentials, points } = updateSubuser;\n\n    return await this.httpClient.put<Subuser, Subuser>(\n      `/subusers/${subuserId}`,\n      {\n        ...updateSubuser,\n        credentials:\n          credentials && (credentials.password || credentials.apiPassword)\n            ? {\n                api_password: credentials.apiPassword,\n                password: credentials.password,\n              }\n            : undefined,\n        points:\n          points && (points.fromAccount || points.perMonth)\n            ? {\n                from_account: points.fromAccount,\n                per_month: points.perMonth,\n              }\n            : undefined,\n      }\n    );\n  }\n\n  async remove(subuserId: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/subusers/${subuserId}`);\n  }\n}\n","import { BaseModule } from '../baseModule';\nimport { ApiCollection } from '../../types';\n\nimport { NewTemplate } from './types/NewTemplate';\nimport { Template } from './types/Template';\n\nexport class Templates extends BaseModule {\n  async get(): Promise<ApiCollection<Template>> {\n    return await this.httpClient.get<\n      ApiCollection<Template>,\n      ApiCollection<Template>\n    >('/sms/templates');\n  }\n\n  async getById(templateId: string): Promise<Template> {\n    return await this.httpClient.get<Template, Template>(\n      `/sms/templates/${templateId}`\n    );\n  }\n\n  async create(newTemplate: NewTemplate): Promise<Template> {\n    return await this.httpClient.post<Template, Template>(\n      '/sms/templates',\n      newTemplate\n    );\n  }\n\n  async update(\n    templateId: string,\n    newTemplate: Partial<NewTemplate>\n  ): Promise<Template> {\n    return await this.httpClient.put<Template, Template>(\n      `/sms/templates/${templateId}`,\n      newTemplate\n    );\n  }\n\n  async remove(templateId: string): Promise<void> {\n    await this.httpClient.delete<void, void>(`/sms/templates/${templateId}`);\n  }\n}\n","import { BaseMessageModule } from '../baseMessageModule';\nimport { MessageResponse } from '../../types/MessageResponse';\n\nimport { VmsTtsLector } from './types/VmsTtsLector';\nimport { VmsDetails } from './types/VmsDetails';\n\nexport class Vms extends BaseMessageModule {\n  endpoint = '/vms.do';\n\n  async sendVms(\n    numbers: string | string[],\n    tts: string,\n    ttsLector?: VmsTtsLector,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        tts,\n        ttsLector,\n      },\n      {\n        to: numbers,\n      },\n      details\n    );\n  }\n\n  async sendVmsWithLocalFile(\n    numbers: string | string[],\n    pathToLocaleFile: string,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        localPath: pathToLocaleFile,\n      },\n      {\n        to: numbers,\n      },\n      details\n    );\n  }\n\n  async sendVmsWithRemoteFile(\n    numbers: string | string[],\n    pathToRemoteFile: string,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        remotePath: pathToRemoteFile,\n      },\n      {\n        to: numbers,\n      },\n      details\n    );\n  }\n\n  async sendVmsToGroup(\n    groups: string | string[],\n    tts: string,\n    ttsLector?: VmsTtsLector,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        tts,\n        ttsLector,\n      },\n      {\n        group: groups,\n      },\n      details\n    );\n  }\n\n  async sendVmsWithLocalFileToGroup(\n    groups: string | string[],\n    pathToLocaleFile: string,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        localPath: pathToLocaleFile,\n      },\n      {\n        group: groups,\n      },\n      details\n    );\n  }\n\n  async sendVmsWithRemoteFileToGroup(\n    groups: string | string[],\n    pathToRemoteFile: string,\n    details?: VmsDetails\n  ): Promise<MessageResponse> {\n    return await this.send(\n      {\n        remotePath: pathToRemoteFile,\n      },\n      {\n        group: groups,\n      },\n      details\n    );\n  }\n}\n","export const API_URL = 'https://smsapi.io/api';\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport axios, { AxiosInstance } from 'axios';\n// @ts-ignore TS7016\nimport adapter from 'axios/lib/adapters/http';\n\nimport { Contacts } from '../modules/contacts';\nimport { Hlr } from '../modules/hlr';\nimport { Mms } from '../modules/mms';\nimport { Profile } from '../modules/profile';\nimport { Sendernames } from '../modules/sendernames';\nimport { Sms } from '../modules/sms';\nimport { Subusers } from '../modules/subusers';\nimport { Templates } from '../modules/templates';\nimport { Vms } from '../modules/vms';\n// @ts-ignore TS6059\nimport { version } from '../../package.json';\nimport { API_URL } from '../constants';\n\nimport { extractDataFromResponse } from './httpClient/extractDataFromResponse';\n/* eslint-enable @typescript-eslint/ban-ts-comment */\n\nexport class SMSAPI {\n  private accessToken: string;\n\n  private httpClient: AxiosInstance;\n\n  public contacts: Contacts;\n  public hlr: Hlr;\n  public mms: Mms;\n  public profile: Profile;\n  public sendernames: Sendernames;\n  public sms: Sms;\n  public subusers: Subusers;\n  public templates: Templates;\n  public vms: Vms;\n\n  constructor(accessToken: string) {\n    this.accessToken = accessToken;\n\n    this.httpClient = this.setHttpClient();\n\n    this.contacts = new Contacts(this.httpClient);\n    this.hlr = new Hlr(this.httpClient);\n    this.mms = new Mms(this.httpClient);\n    this.profile = new Profile(this.httpClient);\n    this.sendernames = new Sendernames(this.httpClient);\n    this.sms = new Sms(this.httpClient);\n    this.subusers = new Subusers(this.httpClient);\n    this.templates = new Templates(this.httpClient);\n    this.vms = new Vms(this.httpClient);\n  }\n\n  private getUserAgent(): string {\n    return `smsapi/js-client:${version}`;\n  }\n\n  private setHttpClient(): AxiosInstance {\n    const httpClient = axios.create({\n      adapter,\n      baseURL: API_URL,\n      headers: {\n        Accept: 'application/json',\n        Authorization: `Bearer ${this.accessToken}`,\n        'User-Agent': this.getUserAgent(),\n      },\n    });\n\n    httpClient.interceptors.response.use(extractDataFromResponse);\n\n    return httpClient;\n  }\n}\n"],"names":["formatKeys","object","mapKeys","_","key","camelCase","formatResponse","newResponse","forEach","value","isDate","isArray","map","arrayValue","isObject","isApiCollection","data","collection","size","isSmsResponse","list","count","extractDataFromResponse","response","BaseModule","httpClient","formatDate","date","toISOString","slice","snakeCase","prepareParamsForRequest","config","method","params","includes","toLowerCase","formattedParams","mapValues","paramsSerializer","stringify","Groups","get","getById","groupId","create","name","details","post","update","updateGroup","put","remove","deleteContacts","formatDates","group","date_created","date_updated","Date","formatResponseDates","Fields","fieldName","fieldType","type","fieldId","newName","Contacts","contactHttpClient","axios","adapter","defaults","baseURL","headers","interceptors","request","use","fields","groups","contactId","phoneNumber","phone_number","formatContactDetails","updateContact","getGroups","getGroupById","assignContactToGroup","unpinContactFromGroup","formattedDetails","birthdayDate","Hlr","check","numbers","idx","number","join","format","BaseMessageModule","send","content","recipient","endpoint","body","formatSmsResponse","encoding","formatSmsDetails","isNumberRecipient","to","isGroupRecipient","isSms","message","trim","isMms","subject","smil","isVmsText","tts","tts_lector","ttsLector","isVmsRemotePath","file","remotePath","isVmsLocalFile","formData","getFormDataForVmsLocalFile","getBuffer","getHeaders","undefined","localPath","FormData","append","Object","entries","fs","readFileSync","contentType","filename","dateValidate","expirationDate","test","sms","dateSent","points","parseFloat","Mms","sendMms","sendMmsToGroup","Profile","Sendernames","formatSendernameDates","getBySender","sender","makeDefault","sendername","createdAt","Sms","sendSms","sendFlashSms","flash","sendSmsToGroup","sendFlashSmsToGroup","removeScheduledSms","smsId","ids","sch_del","Subusers","subuserId","newSubuser","credentials","api_password","apiPassword","password","username","from_account","fromAccount","per_month","perMonth","updateSubuser","Templates","templateId","newTemplate","Vms","sendVms","sendVmsWithLocalFile","pathToLocaleFile","sendVmsWithRemoteFile","pathToRemoteFile","sendVmsToGroup","sendVmsWithLocalFileToGroup","sendVmsWithRemoteFileToGroup","API_URL","SMSAPI","accessToken","setHttpClient","contacts","hlr","mms","profile","sendernames","subusers","templates","vms","getUserAgent","version","Accept","Authorization"],"mappings":"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"}